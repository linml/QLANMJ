<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Uyi</name>
    </assembly>
    <members>
        <member name="T:Uyi.Api.IAPIProcesser">
            <summary>
            实现接口管理器定义的管理接口
            </summary>
        </member>
        <member name="P:Uyi.Api.IAPIProcesser.APIMark">
            <summary>
            接口的备注描述信息
            </summary>
        </member>
        <member name="P:Uyi.Api.IAPIProcesser.HandleName">
            <summary>
            接口的名称
            </summary>
        </member>
        <member name="P:Uyi.Api.IAPIProcesser.ParamRemark">
            <summary>
            接口参数注释内容
            </summary>
        </member>
        <member name="P:Uyi.Api.IAPIProcesser.ApiCode">
            <summary>
            接口业务代码，如果接口需要控制接口权限，请返回系统唯一业务代码。系统会自动检查系统接口的业务代码唯一性
            </summary>
        </member>
        <member name="T:Uyi.Api.APIProcesserManager`1">
            <summary>
            接口处理器管理类，提供接口初始化，创建等管理服务
            </summary>
            <typeparam name="TBase"></typeparam>
        </member>
        <member name="M:Uyi.Api.APIProcesserManager`1.GetAPIProcessor(System.String)">
            <summary>
            根据接口名称得到一个新的接口处理器
            </summary>
            <param name="handle_name"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Api.APIProcesserManager`1.GetAPIProcesserCreator(System.String)">
            <summary>
            根据接口名称获取接口处理处理器的创建器对象
            </summary>
            <param name="handle_name">接口的名称</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Api.APIProcesserManager`1.GetAllApiArray">
            <summary>
            获取所有接口数据集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Api.APIProcesserManager`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Api.APIProcesserManager`1.ApiInterfacesInializer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Api.APIProcesserManager`1.APIProcesserCreator`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Uyi.Api.APIProcesserManager`1.APIProcesserCreator`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Api.APIProcesserManager`1.APIProcesserCreator`1.APIMark">
            <summary>
            接口的备注描述信息
            </summary>
        </member>
        <member name="P:Uyi.Api.APIProcesserManager`1.APIProcesserCreator`1.ParamRemark">
            <summary>
            接口参数注释内容
            </summary>
        </member>
        <member name="P:Uyi.Api.APIProcesserManager`1.APIProcesserCreator`1.HandleName">
            <summary>
            接口的名称
            </summary>
        </member>
        <member name="M:Uyi.Api.APIProcesserManager`1.APIProcesserCreator`1.GetNewAPIProcessor">
            <summary>
            得到一个新的接口处理器对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Api.APIProcesserManager`1.IAPIProcesserCreator">
            <summary>
            向接口管理器公开接口处理器的创建器
            </summary>
        </member>
        <member name="M:Uyi.Api.APIProcesserManager`1.IAPIProcesserCreator.GetNewAPIProcessor">
            <summary>
            得到一个新的接口处理器对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Api.UyiApiCodeCheckException">
            <summary>
            接口ApiCode检查出现异常检查出现异常
            </summary>
        </member>
        <member name="T:Uyi.Api.Web.UyiWebHttpHandleBase">
            <summary>
            类UyiWebHttpHandleBase的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.ProcessRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.Request">
            <summary>
            获取当前 HTTP 请求的 <see cref="T:System.Web.HttpRequest"/> 对象。
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.Response">
            <summary>
            获取当前 HTTP 请求的 <see cref="T:System.Web.HttpResponse"/> 对象。
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.Server">
            <summary>
            获取提供用于处理 Web 请求的方法的 System.Web.HttpServerUtility 对象。
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.Session">
            <summary>
             为当前 HTTP 请求获取 System.Web.SessionState.HttpSessionState 对象。
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.Context">
            <summary>
            获取当前请求的上下文
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.UserHostAddress">
            <summary>
            获取当前客户端的原始IP地址
            </summary>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.Initializer(System.Web.HttpContext)">
            <summary>
            初始化当前的请求信息
            </summary> 
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.WriteFailJson(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="errorcode"></param>
            <param name="message"></param>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.WriteFailJson(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.WriteJson(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.WriteSuccessJson(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.WriteShowBoxJson(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.WriteShowTipsJson(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.GetJsonString(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.WriterString(System.String)">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.WriterString(Uyi.Api.Web.ContextType,System.String)">
            <summary>
            
            </summary> 
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.StackTraceInfo">
            <summary>
            获取当前方法调用堆栈信息
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.APIMark">
            <summary>
            接口注释
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.HandleName">
            <summary>
            接口名称
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.ParamRemark">
            <summary>
            获取接口参数信息
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.UyiWebHttpHandleBase.ApiCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.getParamMark">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.SetCacheMaxAge(System.Int32)">
            <summary>
            设置当前资源的客户端缓存时间
            </summary>
            <param name="maxAge"></param>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.RedirectGet">
            <summary>
            终止当前请求，将当前的请求转换为get请求发起
            </summary>
        </member>
        <member name="M:Uyi.Api.Web.UyiWebHttpHandleBase.RedirectUrl(System.String)">
            <summary>
            
            </summary>
            <param name="uri"></param>
        </member>
        <member name="T:Uyi.Api.Web.WebMainApiProcessBase`1">
            <summary>
            为网站接口入口点提供基类
            </summary>
            <typeparam name="TBase"></typeparam>
        </member>
        <member name="P:Uyi.Api.Web.WebMainApiProcessBase`1.IsReusable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.WebMainApiProcessBase`1.ApiPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Api.Web.WebMainApiProcessBase`1.PathLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Api.Web.WebMainApiProcessBase`1.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Uyi.Api.Web.WebMainApiProcessBase`1.ProcessRequest(System.String,System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="apiname"></param>
            <param name="context"></param>
        </member>
        <member name="M:Uyi.Api.Web.WebMainApiProcessBase`1.WriteError(System.Web.HttpContext,System.Exception)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Uyi.Api.Web.WebMainApiProcessBase`1.WriteError(System.Web.HttpContext,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Uyi.Api.Web.WebMainApiProcessBase`1.WriteDoc(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Uyi.Api.Web.WebMainApiProcessBase`1.WriterTableInfo(System.Data.DataTable,System.String,System.Int32[],System.Int32,System.Int32,Uyi.Web.GetValueMethod)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="title"></param>
            <param name="size"></param>
            <param name="maxszie"></param>
            <param name="minsize"></param>
            <param name="getvalue">获取数据的方法</param>
            <returns></returns>
        </member>
        <member name="T:Uyi.BigInteger">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.BigInteger.data">
            <summary>
            stores bytes from the Big Integer
            </summary>
        </member>
        <member name="F:Uyi.BigInteger.dataLength">
            <summary>
            number of actual chars used
            </summary>
        </member>
        <member name="M:Uyi.BigInteger.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.BigInteger.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.BigInteger.#ctor(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.BigInteger.#ctor(Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi"></param>
        </member>
        <member name="M:Uyi.BigInteger.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="radix"></param>
        </member>
        <member name="M:Uyi.BigInteger.op_Addition(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_Increment(Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_Subtraction(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_Decrement(Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_Multiply(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_LeftShift(Uyi.BigInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.shiftLeft(System.UInt32[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_RightShift(Uyi.BigInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.shiftRight(System.UInt32[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_OnesComplement(Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_UnaryNegation(Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_Equality(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_Inequality(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_Division(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_Modulus(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_BitwiseAnd(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_BitwiseOr(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_ExclusiveOr(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_GreaterThan(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_LessThan(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_GreaterThanOrEqual(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.op_LessThanOrEqual(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.multiByteDivide(Uyi.BigInteger,Uyi.BigInteger,Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <param name="outQuotient"></param>
            <param name="outRemainder"></param>
        </member>
        <member name="M:Uyi.BigInteger.singleByteDivide(Uyi.BigInteger,Uyi.BigInteger,Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <param name="outQuotient"></param>
            <param name="outRemainder"></param>
        </member>
        <member name="M:Uyi.BigInteger.max(Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.min(Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.abs">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.ToString(System.Int32)">
            <summary>
            
            </summary>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.ToHexString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.modPow(Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.BarrettReduction(Uyi.BigInteger,Uyi.BigInteger,Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="n"></param>
            <param name="constant"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.BigInteger.gcd(Uyi.BigInteger)">
            <summary>
            
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Data.CSVFileHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Data.CSVFileHelper.SaveCSV(System.Data.DataTable,System.String)">
            <summary>
            将DataTable中数据写入到CSV文件中
            </summary>
            <param name="dt">提供保存数据的DataTable</param>
            <param name="fullPath">CSV的文件路径</param>
        </member>
        <member name="M:Uyi.Data.CSVFileHelper.SaveCSV(System.Data.DataTable,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Uyi.Data.CSVFileHelper.OpenCSV(System.String)">
            <summary>
            将CSV文件的数据读取到DataTable中
            </summary>
            <param name="fileName">CSV文件路径</param>
            <returns>返回读取了CSV数据的DataTable</returns>
        </member>
        <member name="T:Uyi.Data.ExcelHelper">
            <summary>
            类ExcelHelper的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Data.ExcelHelper.ExcelToDS(System.String)">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.ExcelHelper.ExcelToDS(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Path"></param>
            <param name="tbname"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.ExcelHelper.DT2Excel(System.Data.DataTable,System.IO.Stream)">
            <summary>
            
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.ExcelHelper.DT2Excel(System.Data.DataTable[],System.IO.Stream)">
            <summary>
            
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.ExcelHelper.DT2Excel(System.Data.DataTable[],System.String)">
            <summary>
            
            </summary>
            <param name="tbArray"></param>
            <param name="path"></param>
        </member>
        <member name="M:Uyi.Data.ExcelHelper.DT2Excel(System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <param name="path"></param>
        </member>
        <member name="T:Uyi.Data.UyiDBHelper">
            <summary>
            为数据库的操作提供简单操作支持
            </summary>
        </member>
        <member name="M:Uyi.Data.UyiDBHelper.#ctor(System.String,Uyi.Data.IDBEntityProvide)">
            <summary>
            初始化
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="DBEntityProvide"></param>
        </member>
        <member name="M:Uyi.Data.UyiDBHelper.RunSql(System.String,System.Data.DataSet@)">
            <summary>
            执行处理sql并返回执行的受影响行数
            </summary>
            <param name="sql">需要执行的sql文本</param>
            <param name="ds">执行后得到的数据表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Uyi.Data.UyiDBHelper.RunProcedure(System.String,System.Data.IDataParameter[],System.Data.DataSet@)">
            <summary>
            执行存储过程，返回ReturnValue
            </summary>
            <param name="storedProcName"></param>
            <param name="parameters"></param>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.UyiDBHelper.RunProcedureAsync(System.String,System.Data.IDataParameter[],System.Int32,Uyi.UyiAction{System.Object,System.Data.DataSet})">
            <summary>
            开启一个异步执行sql查询操作
            </summary>
            <param name="storedProcName"></param>
            <param name="parameters"></param>
            <param name="maxtablecount"></param>
            <param name="callback"></param>  
        </member>
        <member name="T:Uyi.Data.IDBEntityProvide">
            <summary>
            数据实体提供程序，提供基础的数据库操作
            </summary>
        </member>
        <member name="M:Uyi.Data.IDBEntityProvide.BeginExecuteReader(System.Data.IDbCommand,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="comm"></param>
            <param name="cb"></param>
            <param name="userObject"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.IDBEntityProvide.EndExecuteReader(System.Data.IDbCommand,System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="iar"></param>
            <param name="comm"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.IDBEntityProvide.BuildInitCommand(System.Data.IDbConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            初始化执行存储过程的存储过程命令行，返回comm
            </summary>
            <param name="connection"></param>
            <param name="storedProcName"></param>
            <param name="parameters"></param> 
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.IDBEntityProvide.BulidDBCommand(System.String)">
            <summary>
            根据sql语句初始化数据库的查询命令对象
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.IDBEntityProvide.GetNewDbConnection(System.String)">
            <summary>
            获取一个新的数据库连接对象
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.IDBEntityProvide.GetNewDbDataAdapter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.IDBEntityProvide.GetParameterValue(System.Object)">
            <summary>
            提供数据的获取
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Data.IDBEntityProvide.GetReturnValue(System.Data.IDbCommand)">
            <summary>
            获取本次查询的返回值
            </summary>
            <param name="selectCommand">查询信息对象</param>
            <returns></returns>
        </member>
        <member name="T:Uyi.DefaultValueManager">
            <summary>
            类DefaultMethodManager的注释信息
            </summary>
        </member>
        <member name="M:Uyi.DefaultValueManager.EmptyMethod">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.DefaultValueManager.BoolEmptyCall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.DefaultValueManager.NewLine">
            <summary>
            获取新行的标记符号
            </summary>
        </member>
        <member name="T:Uyi.Extension._Array">
            <summary>
            数组扩展类
            </summary>
        </member>
        <member name="M:Uyi.Extension._Array.ArrayConcat``1(``0[],``0[])">
            <summary>
            连接两个对象数组序列
            </summary>
        </member>
        <member name="M:Uyi.Extension._Array.ArrayRemoveWhere``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            根据条件删除数组元素
            </summary>
        </member>
        <member name="M:Uyi.Extension._Array.ArrayRemove``1(``0[],System.Int32,System.Int32)">
            <summary>
            从指定索引位置开始删除一定数量的数组元素
            </summary>
        </member>
        <member name="M:Uyi.Extension._Array.MapString``1(``0[],System.Char)">
            <summary>
            数组元素组合函数，将字符串使用指定字符分割组合一条字符串
            </summary>
        </member>
        <member name="T:Uyi.Extension._Bytes">
            <summary>
            字节数组扩展类
            </summary>
        </member>
        <member name="M:Uyi.Extension._Bytes.BytesReverse(System.Byte[])">
            <summary>
            反转字节数组元素
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Bytes.BytesConcat(System.Byte[],System.Byte[])">
            <summary>
            连接两个字节数组
            </summary>
            <param name="data"></param>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Bytes.WriteBytes(System.IO.Stream,System.Byte[])">
            <summary>
            在流中写入字节数据
            </summary>
            <param name="stream">需要写入到的流对象</param>
            <param name="data">需要写入的数据</param>
        </member>
        <member name="M:Uyi.Extension._Bytes.ToBase64String(System.Byte[])">
            <summary>
            将字节数组转换为Base64字符串表示形式
            </summary>
            <param name="data">需要转换的字节数组</param>
            <returns>返回字节数组的 base64 字符串表示形式</returns>
        </member>
        <member name="T:Uyi.Extension._DataTable">
            <summary>
            类_DataTable的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Extension._DataTable.GetDataTableArray(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._DataTable.GetTopOneDataTableArray(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._DataTable.GetDataTableArrayHasColum(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._DataTable.GetTopOneDataTableObjectHasColum(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._DataTable.GetData(System.Data.DataRow,System.String)">
            <summary>
            
            </summary>
            <param name="dr"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Extension._DateTime">
            <summary>
            类_DateTime的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Extension._DateTime.GetTimestamp(System.DateTime)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Extension._Guid">
            <summary>
            将一个GUID值转换为一个简短的区分大小的字符串信息
            </summary>
        </member>
        <member name="M:Uyi.Extension._Guid.ToSimpleString(System.Guid)">
            <summary>
            将一个GUID值转换为一个简短的区分大小的字符串信息
            </summary>
            <param name="guid">需要转换的GUID</param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Extension._IEnumerable">
            <summary>
            集合类型扩展
            </summary>
        </member>
        <member name="M:Uyi.Extension._IEnumerable.IndexOfWhereFirist``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            返回集合中第一个匹配查询的索引，没有匹配返回 -1
            </summary>
        </member>
        <member name="M:Uyi.Extension._IEnumerable.IndexOfWhereAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            返回集合中匹配查询的所有索引的数组，没有匹配返回空数组
            </summary>
        </member>
        <member name="M:Uyi.Extension._IEnumerable.ExistIn``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            返回指定元素的指定字段是否存在指定的集合字典中的一个集合
            </summary>
        </member>
        <member name="M:Uyi.Extension._IEnumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            在所有迭代元素上调用指定方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ele"></param>
            <param name="Fuc"></param>
        </member>
        <member name="M:Uyi.Extension._IEnumerable.Subsection``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            将传入的集合进行分段
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ele">元素集合</param>
            <param name="count">每段最大数量</param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Extension._Object">
            <summary>
            根类型扩展，方法会扩展到所有类型上
            </summary>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToUInt16(System.Object)">
            <summary>
            将对象转换为 16 位无符号整数
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToUInt32(System.Object)">
            <summary>
            将对象转换为 32 位无符号整数
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToUInt64(System.Object)">
            <summary>
            将对象转换为 64 位无符号整数
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToInt16(System.Object)">
            <summary>
            将对象转换为 16 位有符号整数
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToInt32(System.Object)">
            <summary>
            将对象转换为 32 位有符号整数
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToInt64(System.Object)">
            <summary>
            将对象转换为 64 位有符号整数
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToByte(System.Object)">
            <summary>
            将指定对象的值转换为等效的十进制数。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToDateTime(System.Object)">
            <summary>
            将对象转换为时间格式
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToTimeSpan(System.Object)">
            <summary>
            将对象转换为时间格式
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToDouble(System.Object)">
            <summary>
            将指定对象的值转换为双精度浮点数。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToFloat(System.Object)">
            <summary>
            将指定对象的值转换为单精度浮点数。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ConvertToDecimal(System.Object)">
            <summary>
            将指定对象的值转换为等效的十进制数。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.TypeName(System.Object)">
            <summary>
            获取对象的类型名称
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.TypeFullName(System.Object)">
            <summary>
            返回对象类型全名
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Object.ToJson(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Extension._Stream">
            <summary>
            类_Stream的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Extension._Stream.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="fs"></param>
        </member>
        <member name="M:Uyi.Extension._Stream.CopyToAsync(System.IO.Stream,System.IO.Stream,Uyi.UyiAction)">
            <summary>
            开启一个异步拷贝
            </summary>
            <param name="stream"></param>
            <param name="fs"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Uyi.Extension._Stream.GetStreamReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._Stream.GetStreamWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Extension._String">
            <summary>
            字符串类型扩展
            </summary>
        </member>
        <member name="M:Uyi.Extension._String.ParseToUInt16(System.String)">
            <summary>
            将字符串格式化为 16 位无符号整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.ParseToUInt32(System.String)">
            <summary>
            将字符串格式化为 32 位无符号整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.ParseToUInt64(System.String)">
            <summary>
             将字符串格式化为 64 位无符号整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.ParseToInt16(System.String)">
            <summary>
            将字符串格式化为 16 位有符号整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.ParseToInt32(System.String)">
            <summary>
            将字符串格式化为 32 位有符号整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.ParseToInt64(System.String)">
            <summary>
            将字符串格式化为 64 位有符号整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.ParseToDateTime(System.String)">
            <summary>
            将字符串格式化为时间格式的对象
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.Reverse(System.String)">
            <summary>
            反转字符串顺序
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.TrimEnd(System.String,System.String)">
            <summary>
            从当前 System.String 对象尾部移除指定字符串。
            </summary>
            <param name="str"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.TrimStart(System.String,System.String)">
            <summary>
            从当前 System.String 对象开始移除指定字符串。
            </summary>
            <param name="str"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.GetBytes(System.String)">
            <summary>
            将当前字符串的所有字符编码为一个字节序列
            </summary>
            <param name="str">需要编码的字符串</param>
            <returns>返回编码后的字节数组</returns>
        </member>
        <member name="M:Uyi.Extension._String.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            将当前字符串的所有字符编码为一个字节序列。
            </summary>
            <param name="str">需要编码的字符串</param>
            <param name="encode">使用的字符串编码</param>
            <returns>返回编码后的字节数组</returns>
        </member>
        <member name="M:Uyi.Extension._String.GetByteCount(System.String)">
            <summary>
            计算当前字符串的字符进行编码时所产生的字节数。
            </summary>
            <param name="str">需要计算编码字节数的字符串</param>
            <returns>对指定字符进行编码后生成的字节数</returns>
        </member>
        <member name="M:Uyi.Extension._String.GetByteCount(System.String,System.Text.Encoding)">
            <summary>
            计算当前字符串的字符进行编码时所产生的字节数。
            </summary>
            <param name="str">需要计算编码字节数的字符串</param>
            <param name="encode">使用的字符串编码</param>
            <returns>对指定字符进行编码后生成的字节数</returns>
        </member>
        <member name="M:Uyi.Extension._String.Split(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.ToBytes(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._String.ToUrlEncode(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Extension._WebExtern">
            <summary>
            一个关于Web操作的相关扩展
            </summary>
        </member>
        <member name="M:Uyi.Extension._WebExtern.GetAllWebParam(System.Web.HttpRequest,System.Func{System.String,System.Boolean})">
            <summary>
            获取一个参数的集合列表，该参数集合包含有Get请求参数也包含有POST请求的参数
            </summary>
            <param name="request">请求页面</param>
            <param name="call">一个检查回调</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._WebExtern.GetWebParam(System.Web.HttpRequest,System.Func{System.String,System.Boolean})">
            <summary>
            获取一个参数的集合列表
            </summary>
            <param name="request"></param>
            <param name="call"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._WebExtern.GetWebParam(System.Web.HttpRequest)">
            <summary>
             获取一个参数的集合列表，该参数集合包含有Get请求参数也包含有POST请求的参数
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._WebExtern.GetAllWebParam(System.Web.HttpRequest)">
            <summary>
            获取一个参数的集合列表
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._WebExtern.RedirectPostUrl(System.Web.HttpResponse,System.String,Uyi.Web.IWebParamData,Uyi.Web.CheckUrlKeyCall)">
            <summary>
            停止当前页面的请求。使用 POST 提交方式 将请求重定向到新 URL 并指定该新 URL。
            </summary>
        </member>
        <member name="M:Uyi.Extension._WebExtern.RedirectPostUrl(System.Web.HttpResponse,System.String,Uyi.Web.IWebParamData)">
            <summary>
            停止当前页面的请求。使用 POST 提交方式 将请求重定向到新 URL 并指定该新 URL。
            </summary>
        </member>
        <member name="M:Uyi.Extension._WebExtern.GetPostData(System.Web.HttpRequest)">
            <summary>
            获取请求的响应文本
            </summary>
            <param name="Req"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._WebExtern.GetQueryParamData(System.Web.HttpRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._WebExtern.GetFormParamData(System.Web.HttpRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._WebExtern.GetRequestDebugMessage(System.Web.HttpContext,System.Action{System.String})">
            <summary>
            获取一个请求上下文的调试测试信息
            </summary>
            <param name="context"></param>
            <param name="call">获取信息的回调</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Extension._WebExtern.WriteAlertMessage(System.Web.UI.Page,System.String)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <param name="msg"></param>
        </member>
        <member name="T:Uyi.Net.MessageServices.UyiMessageServices">
            <summary>
            类UyiMessageQueueServer的注释信息
            </summary>
        </member>
        <member name="T:Uyi.Net.SocketAsyncEventArgsPool">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Net.SocketAsyncEventArgsMetadata">
            <summary>
            
            </summary>
        </member>
        <member name="E:Uyi.Net.SocketAsyncEventArgsMetadata.Completed">
            <summary>
            用于完成异步操作的事件
            </summary>
        </member>
        <member name="M:Uyi.Net.SocketAsyncEventArgsMetadata.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Uyi.Net.SocketAsyncEventArgsMetadata.Dispose">
            <summary>
             释放由 System.Net.Sockets.SocketAsyncEventArgsMetadata 实例使用的非托管资源，并可选择释放托管资源。
            </summary> 
        </member>
        <member name="T:Uyi.Net.Analysis.PacketCodecHandlerInternal">
            <summary>
            以开始符和结束符分割且以一个短整型（2字节）表示包长度的固定头部的通信包编解码器
            </summary>
        </member>
        <member name="F:Uyi.Net.Analysis.PacketCodecHandlerInternal.EmptyArray">
            <summary>
            表示一个空的字节数组
            </summary>
        </member>
        <member name="P:Uyi.Net.Analysis.PacketCodecHandlerInternal.BeginingMarker">
            <summary>
            开始标记
            </summary>
        </member>
        <member name="P:Uyi.Net.Analysis.PacketCodecHandlerInternal.EndingMarker">
            <summary>
            结束标记
            </summary>
        </member>
        <member name="P:Uyi.Net.Analysis.PacketCodecHandlerInternal.HeaderLength">
            <summary>
            头部长度不包含开始和结束标记
            </summary>
        </member>
        <member name="P:Uyi.Net.Analysis.PacketCodecHandlerInternal.MaxLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:Uyi.Net.Analysis.PacketCodecHandlerInternal.IsLittleEndian">
            <summary>
            机器的LittleEndian特性
            </summary>
        </member>
        <member name="P:Uyi.Net.Analysis.PacketCodecHandlerInternal.Instance">
            <summary>
            实际操作实例
            </summary>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerInternal.#ctor">
            <summary>
            初始化新实例
            </summary>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerInternal.Encode(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerInternal.Decode(System.Byte[],System.Byte@,System.Byte@)">
            <summary>
            反序列化
            </summary>
            <param name="buffer"></param>
            <param name="main"></param>
            <param name="sub"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerInternal.CalcCheckSum(System.Byte[],System.Int32,System.Int32)">
            <summary>
            累加校验，性能较好安全性较差，每秒4W报文
            </summary>
            <param name="buffer"></param>
            <param name="off"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerInternal.IsHeaderValid(System.Byte[],System.Int32)">
            <summary>
             头部CRC校验
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerInternal.ParsePacketInternal(Uyi.IO.NetworkStream@,System.Byte[]@)">
            <summary>
            尝试从指定缓冲区中解析一个完整的通信包
            </summary>
            <param name="buffer">返回第一个完整的报文对象</param> 
            <param name="data">解析到的完整信包</param>
            <returns>解析报文，如果解析成功返回true，否则返回false</returns>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerInternal.ParsePacketInternal(Uyi.IO.NetworkStream@,System.Byte[]@,System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="data"></param>
            <param name="packetdata"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Net.Analysis.PacketCodecHandlerServer">
            <summary>
            Server序列化编解码处理类
            </summary>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerServer.Decode(System.Byte[],System.Byte@,System.Byte@)">
            <summary>
            反序列化
            </summary>
            <param name="buffer"></param>
            <param name="main"></param>
            <param name="sub"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerServer.Encode(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerServer.ParsePacketInternal(Uyi.IO.NetworkStream@,System.Byte[]@)">
            <summary>
            解包方法
            </summary>
            <param name="buffer"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Analysis.PacketCodecHandlerServer.ParsePacketInternal(Uyi.IO.NetworkStream@,System.Byte[]@,System.Byte[]@)">
            <summary>
            解包方法
            </summary>
            <param name="buffer"></param>
            <param name="data"></param>
            <param name="packetdata"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Net.IObjectDispose">
            <summary>
            向客户端通知一个对象已经被释放
            </summary>
        </member>
        <member name="P:Uyi.Net.IObjectDispose.Disposed">
            <summary>
            对象被释放后的通知事件
            </summary>
        </member>
        <member name="T:Uyi.Net.IPipelineDispose">
            <summary>
            向客户端通知一个管道已经被释放
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipelineDispose.PipelineDisposed">
            <summary>
            对象被释放后的通知事件
            </summary>
        </member>
        <member name="T:Uyi.Net.IPipeline">
            <summary>
            为服务器管道对象定义处理接口
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipeline.MessageComing">
            <summary>
            有新消息的通知事件
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipeline.PipelineSendCompleted">
            <summary>
            数据发送触发事件
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipeline.Client">
            <summary>
            客户端通信管道
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipeline.SessionID">
            <summary>
            管道唯一标识符
            </summary>
        </member>
        <member name="M:Uyi.Net.IPipeline.Close">
            <summary>
            关闭管道
            </summary>
        </member>
        <member name="M:Uyi.Net.IPipeline.SendData(System.Object)">
            <summary>
            发送数据对象给远端数据
            </summary>
            <param name="msg">发送消息</param>
        </member>
        <member name="M:Uyi.Net.IPipeline.SendData(System.Byte[])">
            <summary>
            发送数据对象给远端数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Uyi.Net.IPipeline.Dispose(System.Object)">
            <summary>
            
            </summary>
            <param name="userObject"></param>
        </member>
        <member name="P:Uyi.Net.IPipeline.Tag">
            <summary>
            对象携带的用户对象
            </summary>
        </member>
        <member name="M:Uyi.Net.IPipeline.Ping">
            <summary>
            发送一个Ping心跳包指令
            </summary>
        </member>
        <member name="T:Uyi.Net.IGamePipeline">
            <summary>
            为服务器游戏双通管道定义处理接口
            </summary>
        </member>
        <member name="P:Uyi.Net.IGamePipeline.GameServer">
            <summary>
            游戏服务器数据通讯交换管道
            </summary>
        </member>
        <member name="M:Uyi.Net.IGamePipeline.BeginConnectGameServer(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始一个异步操作来创建游戏服务器连接
            </summary>
        </member>
        <member name="M:Uyi.Net.IGamePipeline.BeginConnectGameServer(System.UInt32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始一个异步操作来创建游戏服务器连接
            </summary>
        </member>
        <member name="M:Uyi.Net.IGamePipeline.EndConnectGameServer(System.IAsyncResult)">
            <summary>
            结束游戏服务器连接操作
            </summary>
            <param name="iar"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IGamePipeline.DisConnectGameServer">
            <summary>
            关闭游戏服务器连接
            </summary>
        </member>
        <member name="M:Uyi.Net.IGamePipeline.BeginConnectGameServer(System.String,System.Int32,System.Action{System.Boolean})">
            <summary>
            开始一个异步操作来创建游戏服务器连接
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="callback"></param>
        </member>
        <member name="T:Uyi.Net.Message.MessageComingArgs">
            <summary>
            消息通知事件参数
            </summary>
        </member>
        <member name="M:Uyi.Net.Message.MessageComingArgs.#ctor">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="F:Uyi.Net.Message.MessageComingArgs.Message">
            <summary>
            通知的数据消息
            </summary>
        </member>
        <member name="F:Uyi.Net.Message.MessageComingArgs.PackData">
            <summary>
            当前消息的负载数据
            </summary>
        </member>
        <member name="F:Uyi.Net.Message.MessageComingArgs.wMainCode">
            <summary>
            应用主码
            </summary>
        </member>
        <member name="F:Uyi.Net.Message.MessageComingArgs.wSuCode">
            <summary>
            应用副码
            </summary>
        </member>
        <member name="F:Uyi.Net.Message.MessageComingArgs.SessionID">
            <summary>
            消息所属的会话ID
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.Pipeline">
            <summary>
            表示服务器管道数据处理对象
            </summary>
        </member>
        <member name="F:Uyi.Net.Pipeline.Pipeline.recbuffer">
            <summary>
            接收数据缓冲区
            </summary>
        </member>
        <member name="F:Uyi.Net.Pipeline.Pipeline.EmptyPipeline">
            <summary>
            一个空的客户端管道，该管道的任何方法调用均保证不会有任何实际动作
             ---- 该字段是只读的
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.Pipeline.MessageComing">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.Pipeline.PipelineDisposed">
            <summary>
            管道释放事件
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.Pipeline.PipelineSendCompleted">
            <summary>
            数据发送完成事件
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.Pipeline.Client">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.Pipeline.SessionID">
            <summary>
            管道编号
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.Close">
            <summary>
            关闭管道并释放资源
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.SendData(System.Object)">
            <summary>
            向管道绑定的另一端发送数据
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.SendData(System.Byte[])">
            <summary>
            向管道绑定的另一端发送数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.Connect(System.String,System.Int32)">
            <summary>
            尝试进行远端终结点连接
            </summary>
            <param name="ip">远端IP</param>
            <param name="port">远端端口</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.Dispose">
            <summary>
            释放对象所占用的资源
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.Dispose(System.Object)">
            <summary>
            释放对象所占用的资源
            </summary>
            <param name="userObject"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.OnDisposed(System.Object)">
            <summary>
            触发管道被释放事件
            </summary>
            <param name="userObject"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.OnMessageComing(Uyi.Net.Message.MessageComingArgs)">
            <summary>
            触发消息事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.Client_Disposed(System.Object,System.EventArgs)">
            <summary>
            客户端数据交换管道被释放事件处理程序
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.Client_ReceiveCompleted(System.Object,Uyi.Net.BufferReceiveEventArgs)">
            <summary>
            数据管道收到数据时的事件处理程序
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.Pipeline.Ping">
            <summary>
            向对端发送一条Ping指令
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.Pipeline.Tag">
            <summary>
            当前管道通讯绑定的用户对象
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.EmptyPipeline">
            <summary>
            一个空的客户端管道，该管道的任何方法调用均保证不会有任何实际动作
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.EmptyPipeline.MessageComing">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.EmptyPipeline.PipelineSendCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.EmptyPipeline.Ping">
            <summary>
            向对端发送一条Ping指令
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.EmptyPipelineSocket.ReceiveCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.PipelineBox">
            <summary>
            表示数据交换处理管道
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.CreateNewPipelineBoxFromSocket(Uyi.Net.IPipelineSocket,System.Int32)">
            <summary>
            从一个已经连接的通讯IPipelineSocket基础上创建一个客户端管道实例
            </summary>
            <param name="socket">绑定IPipelineSocket</param>
            <param name="bufferSize">数据交换的缓冲区大小</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.#ctor(System.Int32)">
            <summary>
            初始化数据交换处理管道新实例
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.#ctor(Uyi.Net.IPipelineSocket,System.Int32)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <param name="p"></param>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineBox.GameServer">
            <summary>
            管道与游戏服务器的连接管道
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.Dispose(System.Object)">
            <summary>
            管道释放
            </summary>
            <param name="userObject"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.DisConnectGameServer">
            <summary>
            关闭管道的游戏服务器连接
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.Client_ReceiveCompleted(System.Object,Uyi.Net.BufferReceiveEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.BeginConnectGameServer(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始一个异步操作来创建游戏服务器连接
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="callback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.BeginConnectGameServer(System.UInt32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始一个异步操作来创建游戏服务器连接
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="callback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.EndConnectGameServer(System.IAsyncResult)">
            <summary>
            结束游戏服务器连接操作
            </summary>
            <param name="iar"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineBox.BeginConnectGameServer(System.String,System.Int32,System.Action{System.Boolean})">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="callback"></param>
        </member>
        <member name="T:Uyi.Net.Pipeline.SocketClient">
            <summary>
            一个简单的单根数据管道
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketClient.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer_size"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketClient.CreateNewSocketSinglePipelineFromSocket(Uyi.Net.IPipelineSocket,System.Int32)">
            <summary>
            从一个已经连接的通讯IPipelineSocket基础上创建一个客户端单向管道实例
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketClient.Client_ReceiveCompleted(System.Object,Uyi.Net.BufferReceiveEventArgs)">
            <summary>
            数据管道接收到数据时候的事件处理程序
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.IListen">
            <summary>
            服务器监听器接口
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.IListen.Accepted">
            <summary>
            新的连接请求到达事件
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.IListen.IsStop">
            <summary>
            表示服务器是否处于关闭或停止状态
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.IListen.StartAccept">
            <summary>
            启动监听器，接受连接请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.IListen.StopAccept">
            <summary>
            关闭监听器，拒绝连接请求
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.IListen.IsIPv6Model">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.IListen.ListenPort">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.AcceptedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Net.Pipeline.AcceptedEventArgs.AcceptSocket">
            <summary>
            客户端通讯IPipelineSocket
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.AcceptedEventArgs.#ctor(Uyi.Net.IPipelineSocket)">
            <summary>
            创建一个新实例
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:Uyi.Net.Pipeline.PipelineSocket">
            <summary>
            管道通信Socket封装
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.Disposed">
            <summary>
            服务器断开连接事件
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.ReceiveCompleted">
            <summary>
            接收完成事件
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.SendCompleted">
            <summary>
            数据发送完成事件
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.#ctor(System.Int32)">
            <summary>
            初始化管道通信Socket封装对象新实例
            </summary>
            <param name="bufferSize">用作操作的缓冲区大小</param>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.#ctor(System.Int32,System.Boolean)">
            <summary>
            初始化管道通信Socket封装对象新实例
            </summary>
            <param name="bufferSize">用作操作的缓冲区大小</param>
            <param name="isIPv6Cilent">指示创建的客户端类型</param>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            从基本Socket对象初始化管道通信Socket封装对象的新实例
            </summary>
            <param name="socket">用于管道支撑的连接Socket</param>
            <param name="bufferSize">用作操作的缓冲区大小</param>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.BufferSize">
            <summary>
            数据缓冲区大小
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.IsRecviced">
            <summary>
            表示Socket是否处于数据接收环节
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.Connect(System.String,System.Int32)">
            <summary>
            连接到指定的远端终结点对象
            </summary>
            <param name="ip">要连接到的远端ip地址</param>
            <param name="port">要连接到的远端终结点的端口号</param>
            <returns>返回一个bool值，表示是否连接成功</returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.Dispose">
            <summary>
            释放使用的非托管资源，并可根据需要释放托管资源。
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.Close(System.Boolean)">
            <summary>
            关闭套接字对象连接
            </summary>
            <param name="reuseSocket">该值表示是否允许重用套接字</param>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.StartReceive">
            <summary>
            启动数据接收处理器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.Send(System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.CreateNewPipelineSocket(System.Int32)">
            <summary>
            创建一个新的管道通信对象
            </summary>
            <param name="bufferSize">缓冲区大小</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.SetRemoteIP(System.String)">
            <summary>
            设置远端主机的IP地址
            这个方法不会实际的更改的连接，只是修改了IP属性显示的IP字符串，一般不需要调用这个方法
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.OnReceiveCompleted(System.Object,System.Int32,System.Int32)">
            <summary>
            触发数据接收转发事件
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.PipelineSocket.BeginConnect(System.String,System.Int32,System.Action{System.Boolean})">
            <summary>
            发起对远端主机的异步连接请求
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="iaCallBack"></param>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.IPAdress">
            <summary>
            获取连接的远端IP
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.Port">
            <summary>
            获取Socket当前远端的通信端口
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.SessionID">
            <summary>
            表示当前通讯组件对象的会话ID
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.PipelineSocket.Uyi#Net#IPipelineSocket#IsSetRemoteIP">
            <summary>
            表示当前记录的对方IP信息是否已经被修改
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.SocketAgent">
            <summary>
            类SocketAgent的注释信息
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketAgent.SocketAgentConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketAgent.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="localPort"></param>
            <param name="remIP"></param>
            <param name="remPort"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketAgent.StartServer">
            <summary>
            启动代理服务
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketAgent.StopServer">
            <summary>
            停止代理服务
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketAgent.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketAgent.NewAgentClientSession">
            <summary>
            新的客户端代理建立时触发时间
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketAgent.AgentClientSessionClose">
            <summary>
            一个客户端关闭时调用
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketAgent.SocketAgentClientSession.Dispose">
            <summary>
            释放资源对象
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketAgent.SocketAgentClientSession.SessionID">
            <summary>
            会话ID
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketAgent.SocketAgentClientSession.AcceptSocket">
            <summary>
            获取接收的客户端对象
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.SocketAgentConfig">
            <summary>
            socket 代理对象的配置信息
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketAgentConfig.localPort">
            <summary>
            本地代理端口
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketAgentConfig.remIP">
            <summary>
            代理的远端IP
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketAgentConfig.remPort">
            <summary>
            代理的远端端口
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.SocketServer">
            <summary>
            服务器连接侦听器
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketServer.IsIPv6Model">
            <summary>
            只是当前示例是否支持IPv6连接模式
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketServer.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            初始化一个新的侦听器新实例
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketServer.Accepted">
            <summary>
            新的连接请求到达事件
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketServer.IsStop">
            <summary>
            表示服务器是否处于关闭或停止状态
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.SocketServer.ListenPort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketServer.StartAccept">
            <summary>
            启动侦听器，接受连接请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketServer.StopAccept">
            <summary>
            关闭侦听器，拒绝连接请求
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.SocketServer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.UyiSocketHelper">
            <summary>
            Socket 的创建帮助类
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UyiSocketHelper.GetNewSocketInfo">
            <summary>
            获取一个新的Socket对象，基于通讯版本 IPV4
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.UyiSocketHelper.GetNewSocketIPv6Info">
            <summary>
            获取一个新的Socket对象，基于通讯版本 IPV6
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Net.Pipeline.UdpServer">
            <summary>
            提供UDP服务程序支持
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UdpServer.#ctor(System.String,System.Int32)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UdpServer.Start">
            <summary>
            开启服务
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UdpServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UdpServer.Dispose">
            <summary>
            释放使用所占用的资源
            </summary>
        </member>
        <member name="F:Uyi.Net.Pipeline.UdpServer.UdpServerReceived">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Net.Pipeline.UdpServer.Disposed">
            <summary>
            对象被释放
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.UdpServerReceiveEventArgs">
            <summary>
            Udp 数据包数据接收事件参数信息
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.UdpServerReceiveEventArgs.Data">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.UdpServerReceiveEventArgs.RemoteEndPoint">
            <summary>
            数据发送的远端信息
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.UdpClient">
            <summary>
            Udp 客户端服务对象
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UdpClient.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UdpClient.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UdpClient.SendData(System.String,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="data"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.UdpClient.SendData(Uyi.Net.Pipeline.UdpSendMessageData)">
            <summary>
            发送数据
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:Uyi.Net.Pipeline.UdpClient.UdpSendComplete">
            <summary>
            通知数据发送完成通知事件
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.UdpSendMessageData">
            <summary>
            发送的消息对象数据
            </summary>
        </member>
        <member name="F:Uyi.Net.Pipeline.UdpSendMessageData.ip">
            <summary>
            要将数据发送到的IP地址
            </summary>
        </member>
        <member name="F:Uyi.Net.Pipeline.UdpSendMessageData.port">
            <summary>
            端口
            </summary>
        </member>
        <member name="F:Uyi.Net.Pipeline.UdpSendMessageData.data">
            <summary>
            指示需要发送的数据
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.UdpSendCompleteEventArg">
            <summary>
            Udp客户端吧数据发送完成的通知事件参数信息
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.UdpSendCompleteEventArg.Message">
            <summary>
            发送的消息
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.UdpSendCompleteEventArg.SocketError">
            <summary>
            指示在请求过程指示的操作结果枚举
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.UyiWebServer">
            <summary>
            提供一个基础Http服务器的简单实现
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UyiWebServer.#ctor(System.Int32)">
            <summary>
            初始化一个默认包含所有IP的指定端口的HTTP请求监听器
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UyiWebServer.#ctor(System.String,System.Int32)">
            <summary>
            初始化一个默认包含所有IP的指定端口的HTTP请求监听器
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UyiWebServer.#ctor(System.String[])">
            <summary>
            初始化一个默认包含所有IP的指定端口的HTTP请求监听器
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.UyiWebServer.NewRequest">
            <summary>
            包含一个新请求到达的处理函数
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.UyiWebServer.Start">
            <summary>
            启动服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.UyiWebServer.Stop">
            <summary>
            停止服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.UyiWebServer.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.WebServerRequestContext.Path">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebServerRequestContext.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebServerRequestContext.GetPostData">
            <summary>
            获取请求中上传的POST提交数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebServerRequestContext.GetPostData(System.Text.Encoding)">
            <summary>
            获取请求中上传的POST提交数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebServerRequestContext.WriteJson(System.Object)">
            <summary>
            写入json响应
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebServerRequestContext.WriteRequestFail(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebServerRequestContext.WriteRequestSuccess(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Uyi.Net.Pipeline.WebSessionContextItem">
            <summary>
            会话相关
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.WebSessionContextItem.Item(System.String)">
            <summary>
            向Session管理器写入Session数据
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Uyi.Net.Pipeline.WebSessionContextItem.LastWriterOrReadTime">
            <summary>
            表示当前Session对象的初始化
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.WebSessionContextItem.SessionID">
            <summary>
             Session 会话ID
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebSessionContextItem.GetNewID">
            <summary>
            获取一个新的 Session 会话ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebSessionContextItem.Dispose">
            <summary>
            释放当前会话对象
            </summary>
        </member>
        <member name="T:Uyi.Net.Pipeline.WebSessionContextCollections">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.WebSessionContextCollections.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Pipeline.WebSessionContextCollections.IsReadOnly">
            <summary>
            指示当前的对象是否是只读的
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebSessionContextCollections.Add(Uyi.Net.IWebSessionContext)">
            <summary>
            添加数据
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebSessionContextCollections.Clear">
            <summary>
            清理数据
            </summary>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebSessionContextCollections.Contains(Uyi.Net.IWebSessionContext)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebSessionContextCollections.CopyTo(Uyi.Net.IWebSessionContext[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebSessionContextCollections.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebSessionContextCollections.Remove(Uyi.Net.IWebSessionContext)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Pipeline.WebSessionContextCollections.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Net.PipelineEventHandle`1">
            <summary>
            服务器管道事件参数委托
            </summary>
            <typeparam name="TEventArgs"></typeparam>
            <param name="pipeline"></param>
            <param name="e"></param>
        </member>
        <member name="T:Uyi.Net.IPRandomEngineBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Net.IPRandomEngineBase.BeginIPBytes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Net.IPRandomEngineBase.EndIPBytes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.IPRandomEngineBase.GetIP">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IPRandomEngineBase.GetRandomBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IPRandomEngineBase.Int32ToBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IPRandomEngineBase.BytesToInt32(System.Byte[])">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IPRandomEngineBase.BytesToIPString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IPRandomEngineBase.FormatIPStringToBytes(System.String)">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IPRandomEngineBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.IPRandomEngineBase.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="ipduan"></param>
        </member>
        <member name="M:Uyi.Net.IPRandomEngineBase.NextRandom(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Net.IPipelineSocket">
            <summary>
            定义一个接口，接口包含管道数据交换对象的基本通信方法
            </summary>
        </member>
        <member name="M:Uyi.Net.IPipelineSocket.Close(System.Boolean)">
            <summary>
            关闭管道通信连接
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.ReceiveCompleted">
            <summary>
            另一端的数据接收事件
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.SendCompleted">
            <summary>
            发送完毕的触发事件
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.Disposed">
            <summary>
            对象被释放后的通知事件
            </summary>
        </member>
        <member name="M:Uyi.Net.IPipelineSocket.Send(System.Byte[])">
            <summary>
            向管道另一端发送字节数据
            </summary>
        </member>
        <member name="M:Uyi.Net.IPipelineSocket.Connect(System.String,System.Int32)">
            <summary>
            连接到指定的远端终结点
            </summary>
            <param name="ip">要连接到的远端ip地址</param>
            <param name="port">要连接到的远端终结点的端口号</param>
            <returns>返回一个bool值，表示是否连接成功</returns>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.BufferSize">
            <summary>
            数据缓冲区大小
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.Connected">
            <summary>
            连接成功状态
            </summary>
        </member>
        <member name="M:Uyi.Net.IPipelineSocket.StartReceive">
            <summary>
            开始接收数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IPipelineSocket.BeginConnect(System.String,System.Int32,System.Action{System.Boolean})">
            <summary>
            进行异步连接
            </summary>
            <param name="ip">远程IP</param>
            <param name="port">远端端口</param>
            <param name="iaCallBack">执行完毕后回调</param>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.IPAdress">
            <summary>
            连接的远端IP
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.Port">
            <summary>
            通讯绑定的端口信息
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.IPAdressUInt32">
            <summary>
            返回IP的整型数值的表示形式
            </summary>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.SessionID">
            <summary>
            与客户端通讯回话
            </summary>
        </member>
        <member name="M:Uyi.Net.IPipelineSocket.SetRemoteIP(System.String)">
            <summary>
            设置远端主机的IP地址
            这个方法不会实际的更改的连接，只是修改了IP属性显示的IP字符串，一般不需要调用这个方法
            </summary>
            <param name="ip">设置的IP</param>
        </member>
        <member name="P:Uyi.Net.IPipelineSocket.IsSetRemoteIP">
            <summary>
            表示当前记录的对方IP信息是否已经被修改
            </summary>
        </member>
        <member name="M:Uyi.Net.IPipelineSocket.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="T:Uyi.Net.ISocketAgentClientSession">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.ISocketAgentClientSession.AcceptSocket">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.ISocketAgentClientSession.SessionID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Net.IWebServerListen">
            <summary>
            定义一个接口,该接口包含Http服务器的实现逻辑
            </summary>
        </member>
        <member name="M:Uyi.Net.IWebServerListen.Start">
            <summary>
            启动服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IWebServerListen.Stop">
            <summary>
            停止服务器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Uyi.Net.IWebServerListen.NewRequest">
            <summary>
            新请求的处理通知函数
            </summary>
        </member>
        <member name="T:Uyi.Net.IWebServerRequestContext">
            <summary>
             定义一个接口,该接口包含Http服务器处理请求的上下文信息
            </summary>
        </member>
        <member name="P:Uyi.Net.IWebServerRequestContext.Headers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.IWebServerRequestContext.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.IWebServerRequestContext.InputStream">
            <summary>
            当前请求的数入表单数据
            </summary>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.Close">
            <summary>
            关闭并完成请求
            </summary>
        </member>
        <member name="P:Uyi.Net.IWebServerRequestContext.Context">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:Uyi.Net.IWebServerRequestContext.Path">
            <summary>
            表示请求的路径地址
            </summary>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.Write(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.Flush">
            <summary>
            将缓冲区内的数据写入基础流，并清空缓冲区
            </summary>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.GetPostData">
            <summary>
            获取请求中上传的POST提交数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:Uyi.Net.IWebServerRequestContext.QueryString">
            <summary>
            获取请求中上传的POST提交数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.GetPostData(System.Text.Encoding)">
            <summary>
            获取请求中上传的POST提交数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.GetWebDataParam">
            <summary>
            获取玩家的请求参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.WriteJson(System.Object)">
            <summary>
            写入json响应
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.WriteRequestFail(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Uyi.Net.IWebServerRequestContext.WriteRequestSuccess(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Uyi.Net.IWebSessionContext">
            <summary>
            表示服务器的Session管理对象
            </summary>
        </member>
        <member name="P:Uyi.Net.IWebSessionContext.Item(System.String)">
            <summary>
            获取或者设置Session的对象
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Uyi.Net.IWebSessionContext.LastWriterOrReadTime">
            <summary>
            当前资源信息的最后读取或者写入时间
            </summary>
        </member>
        <member name="P:Uyi.Net.IWebSessionContext.SessionID">
            <summary>
            当前Session的管理会话ID
            </summary>
        </member>
        <member name="T:Uyi.Net.BufferReceiveEventArgs">
            <summary>
            表示数据接收完成事件参数数据
            </summary>
        </member>
        <member name="M:Uyi.Net.BufferReceiveEventArgs.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="P:Uyi.Net.BufferReceiveEventArgs.Buffer">
            <summary>
            数据缓冲区数据
            </summary>
        </member>
        <member name="F:Uyi.Net.BufferReceiveEventArgs.Offset">
            <summary>
            接收到的数据在缓冲区中的偏移量
            </summary>
        </member>
        <member name="F:Uyi.Net.BufferReceiveEventArgs.Count">
            <summary>
            接收到的数据数量
            </summary>
        </member>
        <member name="M:Uyi.Net.BufferReceiveEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="T:Uyi.Net.SystemRunErrorPorvider">
            <summary>
            通讯组件通讯异常的提供程序
            </summary>
        </member>
        <member name="T:Uyi.Net.PipelineDisposedEventArgs">
            <summary>
            管道释放事件通知事件
            </summary>
        </member>
        <member name="F:Uyi.Net.PipelineDisposedEventArgs.Empty">
            <summary>
            表示一个空的释放参数
            </summary>
        </member>
        <member name="P:Uyi.Net.PipelineDisposedEventArgs.UserObject">
            <summary>
            用户主动调用释放时所传递的用户对象
            </summary>
        </member>
        <member name="T:Uyi.Net.Security.SslSocket">
            <summary>
            提供一个安全的通讯Socket
            </summary>
        </member>
        <member name="F:Uyi.Net.Security.SslSocket._isAuthenticate">
            <summary>
            表示当前的连接是否已经成功完成验证操作
            </summary>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            
            </summary>
            <param name="baseSocket"></param>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)">
            <summary>
            验证数据连接
            </summary>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.EndAuthenticateAsServer(System.IAsyncResult)">
            <summary>
            完成通讯连接的验证
            </summary>
            <param name="iar"></param>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.BufferSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.ReceiveCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.SendCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.SessionID">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.Close(System.Boolean)">
            <summary>
            
            </summary>
            <param name="reuseSocket"></param>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.Connect(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.BeginConnect(System.String,System.Int32,System.Action{System.Boolean})">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="iaCallBack"></param>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.IPAdress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.IPAdressUInt32">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocket.IsSetRemoteIP">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.SetRemoteIP(System.String)">
            <summary>
            
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.StartReceive">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.Send(System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Uyi.Net.Security.SslSocket.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="T:Uyi.Net.Security.SslSocketServer">
            <summary>
            提供一个实现 X509Certificate 安全验证协议的安全套接字监听器
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocketServer.IsIPv6Model">
            <summary>
            只是当前示例是否支持IPv6连接模式
            </summary>
        </member>
        <member name="M:Uyi.Net.Security.SslSocketServer.#ctor(System.String,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            初始化一个新的侦听器新实例
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocketServer.Accepted">
            <summary>
            新的连接请求到达事件
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocketServer.IsStop">
            <summary>
            表示服务器是否处于关闭或停止状态
            </summary>
        </member>
        <member name="M:Uyi.Net.Security.SslSocketServer.StartAccept">
            <summary>
            启动侦听器，接受连接请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.Security.SslSocketServer.StopAccept">
            <summary>
            关闭侦听器，拒绝连接请求
            </summary>
        </member>
        <member name="M:Uyi.Net.Security.SslSocketServer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:Uyi.Net.Security.SslSocketServer.ListenPort">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Net.SocketHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Net.SocketHelper.PortInUse(System.Int32)">
            <summary>
            检查指定的端口是否已经被占用
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.SocketHelper.PortInUseProcess(System.Int32)">
            <summary>
            检查指定的端口是否已经被占用
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Net.SocketNetworkStream">
            <summary>
            提供一个异步操作Socket网络通讯的网络流
            </summary>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.#ctor(System.Net.Sockets.Socket)">
            <summary>
            初始化
            </summary>
            <param name="baseSocket"></param>
        </member>
        <member name="P:Uyi.Net.SocketNetworkStream.CanRead">
            <summary>
            指示当前流是否支持读取
            </summary>
        </member>
        <member name="P:Uyi.Net.SocketNetworkStream.CanSeek">
            <summary>
            指示当前流是否支持查找
            </summary>
        </member>
        <member name="P:Uyi.Net.SocketNetworkStream.CanWrite">
            <summary>
            指示当前流是否支持写入
            </summary>
        </member>
        <member name="P:Uyi.Net.SocketNetworkStream.Length">
            <summary>
            获取当前流的长度
            </summary>
        </member>
        <member name="P:Uyi.Net.SocketNetworkStream.Position">
            <summary>
            获取或者设置当前流的游标
            </summary>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.Flush">
            <summary>
            完成数据写入，将数据发送到基础数据流
            </summary>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.SetLength(System.Int64)">
            <summary>
            设置当前数据流的数据流长度（该方法不支持）
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始一个异步读取操作
            </summary>
            <param name="buffer">需要将数据读入的数据缓冲区</param>
            <param name="offset">缓冲区的数据偏移量</param>
            <param name="count">尝试读取的数据长度</param>
            <param name="callback">操作完成的通知回调函数</param>
            <param name="state">用户操作对象</param> 
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始一个异步写入数据操作
            </summary>
            <param name="buffer">需要将数据读入的数据缓冲区</param>
            <param name="offset">缓冲区的数据偏移量</param>
            <param name="count">尝试读取的数据长度</param>
            <param name="callback">操作完成的通知回调函数</param>
            <param name="state">用户操作对象</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.EndRead(System.IAsyncResult)">
            <summary>
            结束一个异步读取操作
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.EndWrite(System.IAsyncResult)">
            <summary>
            结束一个异步写入操作
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="P:Uyi.Net.SocketNetworkStream.CanTimeout">
            <summary>
            指示当前的流是否支持超时
            </summary>
        </member>
        <member name="P:Uyi.Net.SocketNetworkStream.BaseSocket">
            <summary>
            获取当前网络流的基础通讯Socket
            </summary>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.Close">
            <summary>
            关闭当前流
            </summary>
        </member>
        <member name="M:Uyi.Net.SocketNetworkStream.Dispose(System.Boolean)">
            <summary>
            释放当前流占用的托管和非托管资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Uyi.Net.StatisticsManage">
            <summary>
            通讯框架数据统计管理器
            </summary>
        </member>
        <member name="P:Uyi.Net.StatisticsManage.TotalReceiveMessages">
            <summary>
            通讯框架总共接收消息量
            </summary>
        </member>
        <member name="P:Uyi.Net.StatisticsManage.TotalSendMessages">
            <summary>
            通讯框架总共发送消息量
            </summary>
        </member>
        <member name="P:Uyi.Net.StatisticsManage.TotalSendBytes">
            <summary>
            通讯框架总发送数据字节量
            </summary>
        </member>
        <member name="P:Uyi.Net.StatisticsManage.TotalReceiveBytes">
            <summary>
            通讯框架总接受数据字节量
            </summary>
        </member>
        <member name="M:Uyi.Net.StatisticsManage.AddReceiveBytes(System.Int64)">
            <summary>
            增加消息接收字节量
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Uyi.Net.StatisticsManage.AddSendBytes(System.Int64)">
            <summary>
            增加消息发送字节量
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Uyi.Net.StatisticsManage.AddSendMessages">
            <summary>
            递增发送消息量
            </summary>
        </member>
        <member name="M:Uyi.Net.StatisticsManage.AddReceiveMessages">
            <summary>
            递增接收消息量
            </summary>
        </member>
        <member name="M:Uyi.Net.StatisticsManage.SetToZero">
            <summary>
            重置计数器
            </summary>
        </member>
        <member name="T:Uyi.Net.UyiSocketConstManager">
            <summary>
            类UyiSocketConstManager的注释信息
            </summary>
        </member>
        <member name="T:Uyi.OperationEndianOption">
            <summary>
            指示数组存储的大小端特性
            </summary>
        </member>
        <member name="F:Uyi.OperationEndianOption.BigEndian">
            <summary>
            大端存储
            </summary>
        </member>
        <member name="F:Uyi.OperationEndianOption.LittleEndian">
            <summary>
            小段存储
            </summary>
        </member>
        <member name="T:Uyi.ProcessHelper">
            <summary>
            提供进程管理处理逻辑
            </summary>
        </member>
        <member name="M:Uyi.ProcessHelper.Cmd(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="cmdStr"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.ProcessHelper.CmdAsync(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="cmdStr"></param>
            <param name="waitTime"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.ProcessHelper.SaveProcessId(System.String)">
            <summary>
            
            </summary>
            <param name="n"></param>
        </member>
        <member name="T:Uyi.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Uyi.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Uyi.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Uyi.Properties.Resources.font_metrics">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Uyi.Properties.Resources.functionMetadata">
             <summary>
               查找类似 # Licensed to the Apache Software Foundation (ASF) under one or more
            # contributor license agreements.  See the NOTICE file distributed with
            # this work for additional information regarding copyright ownership.
            # The ASF licenses this file to You under the Apache License, Version 2.0
            # (the &quot;License&quot;); you may not use this file except in compliance with
            # the License.  You may obtain a copy of the License at
            # 
            #     http://www.apache.org/licenses/LICENSE-2.0
            # 
            # Unless required by applicable law  [字符串的其余部分被截断]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="T:Uyi.Security.DESEncryptServices">
            <summary>
            DESEncryptServices
            </summary>
        </member>
        <member name="M:Uyi.Security.DESEncryptServices.EncryptDES(System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param> 
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Uyi.Security.DESEncryptServices.DecryptDES(System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">输入需要解密的字符串</param>
            <returns>返回字符串信息</returns>
        </member>
        <member name="M:Uyi.Security.DESEncryptServices.DecryptDES(System.Byte[])">
            <summary>
            DES解密字节数组
            </summary>
            <param name="inputByteArray"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.DESEncryptServices.EncryptDES(System.Byte[])">
            <summary>
            DES加密字节数组
            </summary>
            <param name="inputByteArray">待加密的字节数组</param> 
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Uyi.Security.DESEncryptServices.SimpleBase64EncryptDES(System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param> 
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Uyi.Security.DESEncryptServices.SimpleBase64DecryptDES(System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">输入需要解密的字符串</param>
            <returns>返回字符串信息</returns>
        </member>
        <member name="M:Uyi.Security.DESEncryptServices.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Security.DESEncryptServices.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="secretKey"></param>
        </member>
        <member name="T:Uyi.Security.RSA.RSACryptoService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoService.#ctor(System.String,System.String,System.Int32)">
            <summary>
            初始化RSA加密对象
            </summary>
            <param name="privateKey">密钥对的私钥</param>
            <param name="publicKey">密钥对的公钥</param>
            <param name="certBits">密钥长度目前可选 1024，2048</param>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoService.Decrypt(System.String)">
            <summary>
            使用当前的RSA对象进行解密数据
            </summary>
            <param name="cipherText">待解密的加密数据</param>
            <returns>返回解密的数据</returns>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoService.Encrypt(System.String)">
            <summary>
            对数据进行加密处理
            </summary>
            <param name="text">需要加密的文本数据</param>
            <returns>返回加密后的base64字符串数据</returns>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoService.Encrypt(System.Byte[])">
            <summary>
            对数据进行加密处理
            </summary>
            <param name="encryptBytes">需要加密的字节数据</param>
            <returns>返回加密后的base64字符串数据</returns>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoService.Decrypt(System.Byte[])">
            <summary>
            使用当前的RSA对象进行解密数据
            </summary>
            <param name="decryptBytes">待解密的加密数据</param>
            <returns>返回解密的数据</returns>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoService.SignDataSHA1(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoService.VerifyDataSHA1(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoService.SignDataSHA256(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoService.VerifyDataSHA256(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Security.RSA.RSACryptoServiceProviderExtension">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Security.RSA.RSACryptoServiceProviderExtension.CRYPT_DECODE_FLAGS">
            <summary>Enumeration derived from Crypto API.</summary>
        </member>
        <member name="T:Uyi.Security.RSA.RSACryptoServiceProviderExtension.CRYPT_ENCODING_FLAGS">
            <summary>Enumeration derived from Crypto API.</summary>
        </member>
        <member name="T:Uyi.Security.RSA.RSACryptoServiceProviderExtension.CRYPT_OUTPUT_TYPES">
            <summary>Enumeration derived from Crypto API.</summary>
        </member>
        <member name="T:Uyi.Security.RSA.RSACryptoServiceProviderExtension.CRYPT_OBJID_BLOB">
            <summary>Structure from Crypto API.</summary>
        </member>
        <member name="T:Uyi.Security.RSA.RSACryptoServiceProviderExtension.CRYPT_ALGORITHM_IDENTIFIER">
            <summary>Structure from Crypto API.</summary>
        </member>
        <member name="T:Uyi.Security.RSA.RSACryptoServiceProviderExtension.CRYPT_BIT_BLOB">
            <summary>Structure from Crypto API.</summary>
        </member>
        <member name="T:Uyi.Security.RSA.RSACryptoServiceProviderExtension.CERT_PUBLIC_KEY_INFO">
            <summary>Structure from Crypto API.</summary>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoServiceProviderExtension.CryptDecodeObject(Uyi.Security.RSA.RSACryptoServiceProviderExtension.CRYPT_ENCODING_FLAGS,System.IntPtr,System.Byte[],System.UInt32,Uyi.Security.RSA.RSACryptoServiceProviderExtension.CRYPT_DECODE_FLAGS,System.Byte[],System.UInt32@)">
            <summary>Function from Crypto API.</summary>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoServiceProviderExtension.LoadRSAPrivateKeyPkcs1(System.Byte[],System.Int32)">
            <summary>
            加载私钥处理对象
            </summary>
            <param name="privkey">提交私钥内容</param>
            <param name="certBits">密钥位数</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.RSA.RSACryptoServiceProviderExtension.LoadPublicKeyDER(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>Extension method which initializes an RSACryptoServiceProvider from a DER public key blob.</summary>
        </member>
        <member name="T:Uyi.Security.UyiEncryption">
            <summary>
            为加密处理的操作提供服务模块
            </summary>
        </member>
        <member name="F:Uyi.Security.UyiEncryption.EmptyBytes">
            <summary>
            获取一个空的字节数组
            </summary>
        </member>
        <member name="P:Uyi.Security.UyiEncryption.HMACsha512Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.MD5Encrypt(System.String)">
            <summary>
            采用MD5加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.MD5Encrypt(System.String,System.Text.Encoding)">
            <summary>
            采用MD5加密协议加密字符串
            </summary>
            <param name="context">待加密的文本</param>
            <param name="encoding">加密文本的编码格式</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.MD5EncryptBase64(System.String,System.Text.Encoding)">
            <summary>
            采用MD5加密协议加密字符串 返回Base64编码的字符串的加密结果
            </summary>
            <param name="context"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.MD5EncryptBase64(System.String)">
            <summary>
            采用MD5加密协议加密字符串 返回Base64编码的字符串的加密结果
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.MD5EncryptBytes(System.String)">
            <summary>
            采用MD5加密协议加密字符串 返回字节数组的加密结果
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.MD5EncryptBytes(System.String,System.Text.Encoding)">
            <summary>
            采用MD5加密协议加密字符串 返回字节数组的加密结果
            </summary>
            <param name="context"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha1Encrypt(System.String)">
            <summary>
            采用Sha1加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha1Base64String(System.String)">
            <summary>
            采用Sha1加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha1UyiBase64String(System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha1Encrypt(System.String,System.Text.Encoding)">
            <summary>
            采用Sha1加密协议加密字符串
            </summary>
            <param name="context"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha1Base64String(System.String,System.Text.Encoding)">
            <summary>
            采用Sha1加密协议加密字符串
            </summary>
            <param name="encoding"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha256Encrypt(System.String)">
            <summary>
            采用 SHA256 加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha256Base64String(System.String)">
            <summary>
            采用 SHA256 加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha384Encrypt(System.String)">
            <summary>
            采用 SHA384 加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha384Base64String(System.String)">
            <summary>
            采用 SHA384 加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha512Encrypt(System.String)">
            <summary>
            采用 SHA512 加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Sha512Base64String(System.String)">
            <summary>
            采用 SHA512 加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.HMACSha1Encrypt(System.String,System.Byte[])">
            <summary>
            表示基于哈希的消息验证代码 (HMAC) 
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.HMACSha1EncryptBase64(System.String,System.Byte[])">
            <summary>
            表示基于哈希的消息验证代码 (HMAC) 
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.HMACSha1EncryptBytes(System.String,System.Byte[])">
            <summary>
            表示基于哈希的消息验证代码 (HMAC) 
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.HMACSha1Base64String(System.String,System.Byte[])">
            <summary>
            表示基于哈希的消息验证代码 (HMAC) 
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.DESEncrypt(System.String)">
            <summary>
            采用DES加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.DESDecrypt(System.String)">
            <summary>
            采用DES加密协议解密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.DESEncrypt(System.Byte[])">
            <summary>
            采用DES加密协议加密字节数组
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.DESDecrypt(System.Byte[])">
            <summary>
            采用DES加密协议解密字节数组
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Base64Encrypt(System.String)">
            <summary>
            采用Base64加密协议加密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.Base64Decrypt(System.String)">
            <summary>
            采用Base64加密协议解密字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.ToBase64String(System.Byte[])">
            <summary>
            将字节数组转换为Base64String的表示形式
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.ToBase64Bytes(System.String)">
            <summary>
            从base64字符串中还原字节数据
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.ToSimpleBase64String(System.Byte[])">
            <summary>
            将字节数组转换成一个简单的Base64格式
            </summary>
            <param name="data">需要转换的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.FromSimpleBase64String(System.String)">
            <summary>
            将字节数组转换成一个简单的Base64格式
            </summary>
            <param name="str">需要转换的字节数组</param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Security.UyiEncryption.EncryptionHelper">
            <summary>
            平台数据加密服务的帮助类，提供一些加密验证服务的帮助方法
            </summary>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.EncryptionHelper.GetTimeStamp">
            <summary>
            获取当前时间的时间戳的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.EncryptionHelper.GetDateTimeFromTimeStamp(System.String)">
            <summary>
            将时间戳转换为本地时间
            </summary>
            <param name="timestampStr"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.EncryptionHelper.GetTimeStampInt32">
            <summary>
            获取当前时间的时间戳的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.EncryptionHelper.GetTimeStampInt64">
            <summary>
            获取当前时间的时间戳的字符串表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.EncryptionHelper.GetDateTimeFromTimeStamp(System.Int32)">
            <summary>
            将时间戳转换为本地时间
            </summary>
            <param name="timestampStr"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.EncryptionHelper.UrlEncode(System.String)">
            <summary>
            将url字符串进行一次编码处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.EncryptionHelper.UrlDecode(System.String)">
            <summary>
            将url字符串进行一次解码处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.EncryptionHelper.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            将url字符串进行一次编码处理
            </summary>
            <param name="context"></param>
            <param name="encoder"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.EncryptionHelper.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            将url字符串进行一次解码处理
            </summary>
            <param name="context"></param>
            <param name="encoder"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Security.UyiEncryption.RSAEncryptServices">
            <summary>
            服务器通用RSA非对称加密算法
            </summary>
        </member>
        <member name="P:Uyi.Security.UyiEncryption.RSAEncryptServices.RSA_KEY_XML">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="rsaKeyXml"></param>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            
            </summary>
            <param name="rsaParam"></param>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.EncryptDES(System.Byte[])">
            <summary>
             RSA加密数据
            </summary>
            <param name="encryptBytes">待加密的字符串</param> 
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.DecryptDES(System.Byte[])">
            <summary>
            DES解密数据
            </summary>
            <param name="encryptBytes">待解密的字节数据</param>  
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.SignData(System.Byte[],System.Object)">
            <summary>
             使用指定的哈希算法计算指定字节数组的哈希值，并对计算所得的哈希值签名。
            </summary>
            <param name="content"></param>
            <param name="ha"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.SignHash(System.Byte[],System.String)">
            <summary>
             通过用私钥对其进行加密来计算指定哈希值的签名。
            </summary>
            <param name="content"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.VerifyData(System.Byte[],System.Object,System.Byte[])">
            <summary>
            通过将指定的签名数据与为指定数据计算的签名进行比较来验证指定的签名数据。
            </summary> 
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.ConvertFromPublicKey(System.String)">
            <summary>
            解析.net 生成的Pem
            </summary>
            <param name="pemFileConent"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.ConvertFromPrivateKey(System.String)">
            <summary>
            解析.net 生成的Pem
            </summary>
            <param name="pemFileConent"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Security.UyiEncryption.RSAEncryptServices.DecodePemPrivateKey(System.String)">
            <summary>
            解析java生成的pem文件私钥
            </summary>
            <param name="pemstr"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Serialization.PackCommonIDAttribute">
            <summary>
              消息体常量定义，表示这个类的常量是所有消息定义的主副命令码
            </summary>
        </member>
        <member name="T:Uyi.Serialization.Attributes.MemberIgnore">
            <summary>
            指定一个字段在序列化操作过程中忽略字段行为
            </summary>
        </member>
        <member name="M:Uyi.Serialization.Attributes.MemberIgnore.#ctor">
            <summary>
            类MemberIgnore的默认构造函数
            </summary>
        </member>
        <member name="T:Uyi.Serialization.NonCustomH5SerializerAttribute">
            <summary>
            表示一个消息体没有自定义的序列化器，请自动生成序列化器
            </summary>
        </member>
        <member name="T:Uyi.Serialization.NonH5SerializerAttribute">
            <summary>
            标记类型序列化信息，该类型不应该序列化为h5对象信息
            </summary>
        </member>
        <member name="M:Uyi.Serialization.NonH5SerializerAttribute.#ctor">
            <summary>
            类NonH5Serializer的默认构造函数
            </summary>
        </member>
        <member name="T:Uyi.Serialization.PacketCodeStringAttribute">
            <summary>
            表示在输出时对象属性的输出代码文本，在H5中解析使用
            </summary>
        </member>
        <member name="P:Uyi.Serialization.PacketCodeStringAttribute.CodeStr">
            <summary>
            输出的代码信息文本
            </summary>
        </member>
        <member name="P:Uyi.Serialization.PacketCodeStringAttribute.TypeStr">
            <summary>
            序列化类型的字符串表示信息
            </summary>
        </member>
        <member name="M:Uyi.Serialization.PacketCodeStringAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化一个序列化标签信息的对象
            </summary>
            <param name="typestr"></param>
            <param name="code_str"></param>
        </member>
        <member name="M:Uyi.Serialization.PacketCodeStringAttribute.#ctor(System.String,System.String[])">
            <summary>
            初始化一个序列化标签信息的对象
            </summary>
            <param name="typestr"></param>
            <param name="code_line"></param>
        </member>
        <member name="M:Uyi.Serialization.PacketCodeStringAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Serialization.PacketCodeStringAttribute.SpaceStr">
            <summary>
            设置数据每行的补间空格字符
            </summary>
        </member>
        <member name="T:Uyi.Serialization.PacketContractAttribute">
            <summary>
            指示类型支持序列化的特性标签。
            </summary>
        </member>
        <member name="P:Uyi.Serialization.PacketContractAttribute.TypeCode">
            <summary>
            获取指定类型的唯一代码。如果未指定，则采用该类型的 GUID。
            </summary>
        </member>
        <member name="M:Uyi.Serialization.PacketContractAttribute.#ctor">
            <summary>
            初始化类<c>PacketContractAttribute</c>的一个新实例。
            </summary>
        </member>
        <member name="M:Uyi.Serialization.PacketContractAttribute.#ctor(System.Int32)">
            <summary>
            指定类型代码来初始化<c>PacketContractAttribute</c>的一个新实例。
            </summary>
            <param name="typeCode">
            类型代码。用于标识当前指定序列化的类型。必须确保唯一。
            如果不指定或指定为负数，则将采用类型的 GUID。
            </param>
        </member>
        <member name="M:Uyi.Serialization.PacketContractAttribute.#ctor(System.String)">
            <summary>
            指定类型代码来初始化<c>PacketContractAttribute</c>的一个新实例。
            </summary>
            <param name="typeCode">
            类型代码。用于标识当前指定序列化的类型。必须确保唯一。
            如果不指定或指定为空字符串，则将采用类型的 GUID。
            </param>
        </member>
        <member name="T:Uyi.Serialization.PacketMemberAttribute">
            <summary>
            <para>序列化成员属性标识特性标签。为每个序列化成员属性指定其在整个数据块中的编排顺序号或上一个紧邻的成员名称。
            成员序列化编号在整个类型的序列化中必须是唯一的</para>
            现在支持不指定编排顺序码，如果不指定则按照字段的成员名称按照字典序编排解析序列化顺序
            </summary>
        </member>
        <member name="P:Uyi.Serialization.PacketMemberAttribute.Order">
            <summary>
            获取成员在报文中的存储顺序。
            </summary>
        </member>
        <member name="M:Uyi.Serialization.PacketMemberAttribute.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Uyi.Serialization.PacketMemberAttribute.#ctor(System.Int32)">
            <summary>
            指定成员在对象格式化输出的数据块中的顺序来初始化类<c>PacketMemberAttribute</c>的一个新实例。
            </summary>
            <param name="order">
            顺序号，从 1 开始的整数。用于指定成员在对象序列化后的数据块中的排列顺序。
            注意：同一类型中各需序列化的成员（假如有基类的也标记为序列化的成员则同样包含该成员）的顺序号不能相同。
            </param>
        </member>
        <member name="M:Uyi.Serialization.PacketMemberAttribute.#ctor(System.String)">
            <summary>
            指定成员在对象格式化输出的数据块中的顺序来初始化类 <see cref="T:Uyi.Serialization.PacketMemberAttribute"/> 的一个新实例。
            </summary>
            <param name="order">
            顺序排序名称用于指定成员在对象序列化后的数据块中的排列顺序。
            注意：同一类型中各需序列化的成员（假如有基类的也标记为序列化的成员则同样包含该成员）的顺序号不能相同。
            </param>
        </member>
        <member name="T:Uyi.Serialization.PacketNonCustomSerializerAttribute">
            <summary>
            指示类型如何支持序列化的特性标签,该类型不应该使用自定义类型序列化器
            </summary>
        </member>
        <member name="T:Uyi.Serialization.Base64Serialzier">
            <summary>
            提供字节数组到字符串的编解码实现，使用的是base64的编解码实现，但并不符合base64编解码的标准
            </summary>
        </member>
        <member name="M:Uyi.Serialization.Base64Serialzier.ToBase64String(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Base64Serialzier.FromBase64String(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Base64Serialzier.FromBase64CharPtr(System.Char*,System.Int32)">
            <summary>
            
            </summary>
            <param name="inputPtr"></param>
            <param name="inputLength"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Base64Serialzier.FromBase64_Decode(System.Char*,System.Int32,System.Byte*,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="startInputPtr"></param>
            <param name="inputLength"></param>
            <param name="startDestPtr"></param>
            <param name="destLength"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Serialization.BaseType.ByteArrayTypeSerialize">
            <summary>
            为字节数组的序列化单独创建一个序列化器，以增加在序列化和反序列化字节数组的系统性能
            </summary>
        </member>
        <member name="M:Uyi.Serialization.BaseType.ByteArrayTypeSerialize.#ctor">
            <summary>
            创建为字节数组的序列化器
            </summary>
        </member>
        <member name="T:Uyi.Serialization.BaseType.DataTableTypeSerialize">
            <summary>
            类DataTableTypeSerialize的注释信息
            </summary>
        </member>
        <member name="T:Uyi.Serialization.BaseType.GUIDTypeSerialize">
            <summary>
            GUID的类型序列化器
            </summary>
        </member>
        <member name="T:Uyi.Serialization.BaseType.SByteTypeSerialize">
            <summary>
            类SByteTypeSerialize的注释信息
            </summary>
        </member>
        <member name="T:Uyi.Serialization.BinarySerializer">
            <summary>
            服务器序列化操作支持类
            </summary>
        </member>
        <member name="M:Uyi.Serialization.BinarySerializer.Serialize(System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.BinarySerializer.GetTypeCode(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.BinarySerializer.CanDeserialize(System.Int32)">
            <summary>
            
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.BinarySerializer.CanDeserialize(System.Int32,Uyi.Serialization.ITypeSerializer@)">
            <summary>
            
            </summary>
            <param name="typeCode"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.BinarySerializer.Deserialize(System.IO.MemoryStream,System.Int32,Uyi.Serialization.ITypeSerializer)">
            <summary>
            进行对象的反序列化操作
            </summary>
            <param name="ms"></param>
            <param name="typeCode"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.BinarySerializer.UnsafeDeserialize(System.Byte*,System.Int32,Uyi.Serialization.ITypeSerializer)">
            <summary>
            进行对象的反序列化操作
            </summary>
            <param name="stream"></param>
            <param name="serializer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.BinarySerializer.GetTypeSerializer(System.Object)">
            <summary>
            获取对象序列化器
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.BinarySerializer.GetTypeSerializer(System.Type)">
            <summary>
            获取指定类型的对象序列化器
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.BinarySerializer.GetSerializerType(System.Int32)">
            <summary>
            
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Serialization.DebugHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Serialization.DebugHelper.RuningLog(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="E:Uyi.Serialization.DebugHelper.LogMessage">
            <summary>
            日志信息的通知事件
            </summary>
        </member>
        <member name="T:Uyi.Serialization.DebugEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Serialization.DebugEventArgs.Log">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Serialization.SerializationErrorEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Serialization.SerializationErrorEvent.OnErrorEvent(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:Uyi.Serialization.DynmaicType.ArrayTypeSerialize`1">
            <summary>
            数组类型序列化器
            </summary>
        </member>
        <member name="T:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1">
            <summary>
            表示一个类型的动态编排序列化器
            </summary>
        </member>
        <member name="T:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.Writer">
            <summary>
            定义一个委托，这个委托表示当前序列化器的序列化方法的信息
            </summary>
            <param name="obj"></param>
            <param name="stream"></param>
        </member>
        <member name="T:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.Reader">
            <summary>
            定义一个委托，这个委托表示当前反序列化器的序列化方法的信息
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.#ctor">
            <summary>
            创建动态序列化器
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.Deserialize(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.Serialize(`0,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.UnsafeDeserialize(System.Byte*,System.Int32*,System.Int32)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="pos"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.GetPacketMemberInfos(System.Type)">
            <summary>
            反射获取类型的类型成员信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.CheckWriterObject(`0,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.CheckReadObject(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.UnsafeCheckReadObject(System.Byte*,System.Int32*,System.Int32)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="pos"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.DynmaicType.DynmaicClassSerialize`1.CheckTypeLoopRefer(System.Type)">
            <summary>
            检查序列化的类中是否有循环引用的对象
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Error.TypeNotIsArray">
            <summary>
            类型不是一个数组类型，不能使用数组类型初始化器初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Error.NotFindSerializerMethod(System.Type)">
            <summary>
            没有找到指定类型的序列化器
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Serialization.ITypeSerializer">
            <summary>
            定义一个接口，提供类型序列化和反序列化功能
            </summary>
        </member>
        <member name="M:Uyi.Serialization.ITypeSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            将对象序列化为字节流
            </summary>
            <param name="obj"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Uyi.Serialization.ITypeSerializer.Deserialize(System.IO.Stream)">
            <summary>
            将字节流反序列化为对象
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.ITypeSerializer.UnsafeDeserialize(System.Byte*,System.Int32*,System.Int32)">
            <summary>
            非安全模式操作序列化
            </summary>
            <param name="stream">操作序列化的 byte 指针</param>
            <param name="length">当前序列化器数据长度</param>
            <param name="pos">读取游标</param>
            <returns></returns>
        </member>
        <member name="P:Uyi.Serialization.ITypeSerializer.SerializerType">
            <summary>
            该序列花器支持序列化的类型对象
            </summary>
        </member>
        <member name="P:Uyi.Serialization.ITypeSerializer.SerializerName">
            <summary>
            获取该序列化器的名称
            </summary>
        </member>
        <member name="P:Uyi.Serialization.ITypeSerializer.WriterInfo">
            <summary>
            动态编译时序列化器的序列化操作方法信息
            </summary>
        </member>
        <member name="P:Uyi.Serialization.ITypeSerializer.ReaderInfo">
            <summary>
             动态编译时反序列化器的序列化操作方法信息
            </summary>
        </member>
        <member name="P:Uyi.Serialization.ITypeSerializer.UnsafeReaderInfo">
            <summary>
             动态编译时反序列化器的序列化操作方法信息
            </summary>
        </member>
        <member name="T:Uyi.Serialization.TypeSerializationBase`1">
            <summary>
            类型序列化器基类，提供类型序列化的基础方法实现
            </summary>
        </member>
        <member name="T:Uyi.Serialization.TypeSerializationBase`1.delUnsafeReaderMethod">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="pos"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Serialization.TypeSerializationBase`1.delUnsafeReaderMethod`1">
            <summary>
            
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="stream"></param>
            <param name="pos"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:Uyi.Serialization.TypeSerializationBase`1.WriterInfo">
            <summary>
            当前序列化器的序列化方法的
            </summary>
        </member>
        <member name="P:Uyi.Serialization.TypeSerializationBase`1.ReaderInfo">
            <summary>
            当前序列化器的反序列化方法信息
            </summary>
        </member>
        <member name="P:Uyi.Serialization.TypeSerializationBase`1.UnsafeReaderInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Serialization.TypeSerializationBase`1._serializerType">
            <summary>
            表示需要序列化的类型对象
            </summary>
        </member>
        <member name="F:Uyi.Serialization.TypeSerializationBase`1._serializerName">
            <summary>
            类型序列化器名称，未指定默认使用类型GUID全名
            </summary>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationBase`1.Serialize(`0,System.IO.Stream)">
            <summary>
            将对象进行序列化
            </summary>
            <param name="obj"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationBase`1.Deserialize(System.IO.Stream)">
            <summary>
            将对象反序列化为对象
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationBase`1.UnsafeDeserialize(System.Byte*,System.Int32*,System.Int32)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="pos"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationBase`1.CreateNewObject">
            <summary>
            创建一个新的对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:Uyi.Serialization.TypeSerializationBase`1.SerializerType">
            <summary>
            当前序列化器的支持的序列化类型
            </summary>
        </member>
        <member name="P:Uyi.Serialization.TypeSerializationBase`1.SerializerName">
            <summary>
            当前序列化的序列化器的名称
            </summary>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationBase`1.ToString">
            <summary>
            将当前的序列化输出为字符串的表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationBase`1.Uyi#Serialization#ITypeSerializer#UnsafeDeserialize(System.Byte*,System.Int32*,System.Int32)">
            <summary>
            非安全模式操作序列化
            </summary>
            <param name="stream">操作序列化的 byte 指针</param>
            <param name="length">当前序列化器数据长度</param>
            <param name="pos">读取游标</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationBase`1.GetReaderMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationBase`1.GetUnsafeReaderMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationBase`1.GetWriterMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Serialization.TypeSerializationHelper">
            <summary>
            类型序列化帮助类，实现基本类型的一些扩展方法
            </summary>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.GetTypeSerializer(System.Type)">
            <summary>
            获取类型序列化器
            </summary>
            <param name="type">需要序列化的类型</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.GetTypeSerializer(System.String)">
            <summary>
            获取类型序列化器
            </summary>
            <param name="key">需要获取序列化器的名称</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.IsCanSerializeType(System.Type)">
            <summary>
            判断指定类型是否支持序列化
            </summary>
            <param name="type">判断的类型</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.IsCanSerializeProperty(System.Reflection.MemberInfo)">
            <summary>
            判断类型成员是否支持序列化
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.GetTypeSerializeAttr(System.Reflection.MemberInfo)">
            <summary>
            获取类型的序列化特性
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.GetMemberSerializeAttr(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员的序列化特性
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            对成员对象搜索指定类型的特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.IsEmpty(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="rr"></param>
            <param name="defaul"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.IsHasCustomSerializer(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.TypeSerializationHelper.CanDeserialize(System.Int32)">
            <summary>
            检查指定编码类型是否支持反序列化
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Serialization.TypeSerializerFactory">
            <summary>
            类型序列化器工厂
            </summary>
        </member>
        <member name="T:Uyi.Serialization.Extension._SerializerExtension">
            <summary>
            类_SerializerExtension的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadInt16(System.IO.Stream)">
            <summary>
            读取一个有符号的 16 位整数
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的有符号的 16 位整数</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadInt32(System.IO.Stream)">
            <summary>
            读取一个有符号的 32 位整数
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的有符号的 32 位整数</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadInt64(System.IO.Stream)">
            <summary>
            读取一个有符号的 64 位整数
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的有符号的 64 位整数</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadDecimal(System.IO.Stream)">
            <summary>
            读取一个 decimal 浮点数据
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的 decimal 浮点数据</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadFloat(System.IO.Stream)">
            <summary>
            读取一个 float 浮点数据
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的 float 浮点数据</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadSingle(System.IO.Stream)">
            <summary>
            读取一个 float 浮点数据
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的 float 浮点数据</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadDouble(System.IO.Stream)">
            <summary>
            读取一个 double 浮点数据
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的 double 浮点数据</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadString(System.IO.Stream)">
            <summary>
            读取一个字符串
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的字符串</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadDateTime(System.IO.Stream)">
            <summary>
            读取一个 DateTime 时间数据
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的 DateTime 时间数据</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadTimeSpan(System.IO.Stream)">
            <summary>
            读取一个 TimeSpan 时间间隔数据
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的 TimeSpan 时间间隔数据</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadGuid(System.IO.Stream)">
            <summary>
            读取一个 Guid 标识符数据
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的 TimeSpan 时间间隔数据</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadDataTable(System.IO.Stream)">
            <summary>
            读取一个 DataTable 数据表数据
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的 DataTable 数据表数据</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadLengthData(System.IO.Stream)">
            <summary>
            读取一个表示数据长度的数据
            </summary>
            <param name="stream">从中读取的流</param>
            <returns>返回读取到的长度信息数据</returns>
            <exception cref="T:System.IO.InvalidDataException">当遇到文件流的末尾时引发</exception>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadSByte(System.IO.Stream)">
            <summary>
            读取一个有符号的字节数据
            </summary>
            <param name="stream">读取流</param>
            <returns>返回读取到的数据</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadUInt16(System.IO.Stream)">
            <summary>
            读取一个无符号的 16 位整数
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的无符号的 16 位整数</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadUInt32(System.IO.Stream)">
            <summary>
            读取一个无符号的 32 位整数
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的无符号的 32 位整数</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.ReadUInt64(System.IO.Stream)">
            <summary>
            读取一个无符号的 64 位整数
            </summary>
            <param name="stream">希望读取的流</param>
            <returns>返回读取到的无符号的 64 位整数</returns>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteLengthData(System.IO.Stream,System.Int32)">
            <summary>
            写入一个表示数据长度的数据
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="len">希望写入的长度数据</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.UInt64)">
            <summary>
            写入一个无符号的 64 位整数
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.UInt32)">
            <summary>
            写入一个无符号的 32 位整数
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.UInt16)">
            <summary>
            写入一个无符号的 16 位整数
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.SByte)">
            <summary>
            写入一个有符号的字节数据
            </summary>
            <param name="stream">写入到的流</param>
            <param name="value">写入的数据</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.Byte)">
            <summary>
            写入一个 Guid 标识符数据
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.Data.DataTable)">
            <summary>
            写入一个 Guid 标识符数据
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.Guid)">
            <summary>
            写入一个 Guid 标识符数据
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.TimeSpan)">
            <summary>
            写入一个 TimeSpan 时间间隔数据
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.DateTime)">
            <summary>
            写入一个 DateTime 时间数据
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.String)">
            <summary>
            写入一个字符串
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.Int16)">
            <summary>
            写入一个有符号的 16 位整数
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.Int32)">
            <summary>
            写入一个有符号的 32 位整数
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.Int64)">
            <summary>
            写入一个有符号的 64 位整数
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.Decimal)">
            <summary>
            写入一个 decimal 浮点数据
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.Single)">
            <summary>
            写入一个 float 浮点数据
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="M:Uyi.Serialization.Extension._SerializerExtension.WriteValue(System.IO.Stream,System.Double)">
            <summary>
            写入一个 double 浮点数据
            </summary>
            <param name="stream">希望写入的流</param>
            <param name="value">希望写入的值</param>
        </member>
        <member name="T:Uyi.Serialization.PacketCodecHandler">
            <summary>
            数据的封包和拆包方法
            </summary>
        </member>
        <member name="F:Uyi.Serialization.PacketCodecHandler.CurrentMaxVer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Serialization.PacketCodecHandler.EmptyByteArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Serialization.PacketCodecHandler.PacketData(System.Byte[])">
            <summary>
            对传输数据进行封包
            </summary>
            <param name="data">需要传输的数据</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.PacketCodecHandler.UnsafePacketData(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.PacketCodecHandler.UnsafeWriteInt16BigEndian(System.Byte*,System.UInt16)">
            <summary>
            向指定的指针位置的指定偏移位置写入指定的值
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.Serialization.PacketCodecHandler.UnPacketData(Uyi.IO.NetworkStream,System.Byte[]@)">
            <summary>
            对传输数据进行拆包
            </summary> 
        </member>
        <member name="M:Uyi.Serialization.PacketCodecHandler.UnPacketData(Uyi.IO.NetworkStream,System.Byte[]@,System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="data"></param>
            <param name="packdata"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.PacketCodecHandler.GETCRCData(System.Byte[])">
            <summary>
            计算CRC校验和值
            </summary>
            <param name="crc_data"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Serialization.UyiDataTableTypeSerializer">
            <summary>
            提供对数据库表 DataTable 的数据传输服务
            </summary>
        </member>
        <member name="T:Uyi.Serialization.UyiDataTableTypeSerializer.UyiDataTableSerializerCodeBulid">
            <summary>
            类UyiDataTableSerializerCodeBulid的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Serialization.UyiDataTableTypeSerializer.UyiDataTableSerializerCodeBulid.bulidCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.UyiDataTableTypeSerializer.UyiDataTableSerializerCodeBulid.s_r(System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Type,System.Int32@)">
            <summary>
            
            </summary>
            <param name="strb_ct"></param>
            <param name="strb_g"></param>
            <param name="strb_w"></param>
            <param name="strb_r"></param>
            <param name="type"></param>
            <param name="index"></param>
        </member>
        <member name="T:Uyi.Serialization.Json.JsonHelper">
            <summary>
            类JsonHelper的注释信息
            </summary>
        </member>
        <member name="F:Uyi.Serialization.Json.JsonHelper.FormatJsonSetting">
            <summary>
            格式化json的设置信息
            </summary>
        </member>
        <member name="M:Uyi.Serialization.Json.JsonHelper.ToZipJson(System.Object)">
            <summary>
            将对象转换为json表示格式
            </summary>
            <param name="obj">需要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Json.JsonHelper.ToFormatJson(System.Object)">
            <summary>
            将对象转换为json表示格式
            </summary>
            <param name="obj">需要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Json.JsonHelper.ToZipJsonFile(System.Object,System.String)">
            <summary>
            将对象转换为json表示格式
            </summary>
            <param name="obj">需要转换的对象</param>
            <param name="path">表示文件存储的路径</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Json.JsonHelper.ToFormatJsonFile(System.Object,System.String)">
            <summary>
            将对象转换为json表示格式
            </summary>
            <param name="obj">需要转换的对象</param>
            <param name="path">文件存储的路径</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Json.JsonHelper.ToObjectFromJson``1(System.String)">
            <summary>
            将json格式对象转换为指定 T 类型的对象,如果转换失败，返回 T 类型的默认值
            </summary>
            <typeparam name="T">需要转换的类型对象</typeparam>
            <param name="json">需要转换的json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Serialization.Json.JsonHelper.ToObjectFromJsonFile``1(System.String)">
            <summary>
            将json格式对象转换为指定 T 类型的对象,如果转换失败，返回 T 类型的默认值
            </summary>
            <typeparam name="T">需要转换的类型对象</typeparam>
            <param name="path">需要转换的json信息存储文件的路径</param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Serialization.LittleEndian.LittleEndianPrimitiveTypeSerializer">
            <summary>
            为系统基础类型字节编码提供统一的序列化和反序列化编码能力(小端存储序)
            </summary>
        </member>
        <member name="T:Uyi.Serialization.BigEndian.BigEndianPrimitiveTypeSerializer">
            <summary>
            为系统基础类型字节编码提供统一的序列化和反序列化编码能力(大端存储序)
            </summary>
        </member>
        <member name="T:Uyi.Tools.IAppConfigBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.IAppConfigBase.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.IAppConfigBase.Save">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Tools.AppConfigBase`1">
            <summary>
            
            </summary>
            <typeparam name="HostType"></typeparam>
        </member>
        <member name="M:Uyi.Tools.AppConfigBase`1.Save">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.AppConfigBase`1.Load">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Uyi.Tools.AppConfigBase`1.ConfigPath">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="M:Uyi.Tools.AppConfigBase`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Tools.AppConfigBase`1.Instance">
            <summary>
            单例模式，获取系统配置实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.AppConfigBase`1.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.AppConfigBase`1.LoadConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Tools.AppConfigPathInfo">
            <summary>
            指示服务器的配置文件名称，默认使用进程名称标识文件名称
            </summary>
        </member>
        <member name="M:Uyi.Tools.AppConfigPathInfo.#ctor(System.String)">
            <summary>
            初始化新实例
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:Uyi.Tools.InterfaceCallHelper">
            <summary>
            类InterfaceCallHelper的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Tools.InterfaceCallHelper.DynamicCreateType(System.Type,System.Reflection.MethodInfo,System.Int32)">
            <summary>
            
            </summary>
            <param name="interfaceType"></param> 
            <param name="instanceMethod"></param>
            <param name="maxTryCount"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Tools.RegistryHelper">
            <summary>
            类RegistryHelper的注释信息
            </summary>
        </member>
        <member name="T:Uyi.Tools.IDCardValidation">
            <summary> 
            验证身份证号码类 
            </summary> 
        </member>
        <member name="M:Uyi.Tools.IDCardValidation.CheckIDCard(System.String)">
            <summary> 
            验证身份证合理性 
            </summary> 
            <param name="idNumber">需要解码的身份证号码信息</param> 
            <returns></returns> 
        </member>
        <member name="M:Uyi.Tools.IDCardValidation.CheckIDCard18(System.String)">
            <summary> 
            18位身份证号码验证 
            </summary> 
        </member>
        <member name="M:Uyi.Tools.IDCardValidation.CheckIDCard15(System.String)">
            <summary> 
            16位身份证号码验证 
            </summary> 
        </member>
        <member name="T:Uyi.Tools.StackTraceHelper">
            <summary>
            类StackTraceHelper的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Tools.StackTraceHelper.GetStackTraceInfo(System.Int32)">
            <summary>
            获取当前执行的堆栈信息
            </summary>
            <param name="skipcount"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.StackTraceHelper.GetStackTraceInfo">
            <summary>
            获取当前方法的调用堆栈信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Tools.PerformanceCount">
            <summary>
            程序性能计数器
            </summary>
        </member>
        <member name="P:Uyi.Tools.PerformanceCount.CpuCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Tools.PerformanceCount.RamCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Tools.FilterWord">
            <summary>
            非法关键词过滤(自动忽略汉字数字字母间的其他字符)
            </summary>
        </member>
        <member name="P:Uyi.Tools.FilterWord.DictionaryPath">
            <summary>
            词库路径
            </summary>
        </member>
        <member name="F:Uyi.Tools.FilterWord.MEMORYLEXICON">
            <summary>
            内存词典
            </summary>
        </member>
        <member name="F:Uyi.Tools.FilterWord.cursor">
            <summary>
            检测源游标
            </summary>
        </member>
        <member name="F:Uyi.Tools.FilterWord.wordlenght">
            <summary>
            匹配成功后偏移量
            </summary>
        </member>
        <member name="F:Uyi.Tools.FilterWord.nextCursor">
            <summary>
            检测词游标
            </summary>
        </member>
        <member name="P:Uyi.Tools.FilterWord.IllegalWords">
            <summary>
            检测到的非法词集
            </summary>
        </member>
        <member name="P:Uyi.Tools.FilterWord.SourctText">
            <summary>
            检测源
            </summary>
        </member>
        <member name="M:Uyi.Tools.FilterWord.isCHS(System.Char)">
            <summary>
            判断是否是中文
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.FilterWord.isNum(System.Char)">
            <summary>
            判断是否是数字
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.FilterWord.isAlphabet(System.Char)">
            <summary>
            判断是否是字母
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.FilterWord.ToDBC(System.String)">
             <summary>
             转半角小写的函数(DBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:Uyi.Tools.FilterWord.LoadDictionary">
            <summary>
            加载内存词库
            </summary>
        </member>
        <member name="M:Uyi.Tools.FilterWord.Check(System.String)">
            <summary>
            检测
            </summary>
            <param name="blackWord"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.FilterWord.Filter(System.Char)">
            <summary>
            查找并替换
            </summary>
            <param name="replaceChar"></param>
        </member>
        <member name="P:Uyi.Tools.FilterWord.IsPoolObject">
            <summary>
            指示当前对象是不是对象池管理对象
            </summary>
        </member>
        <member name="P:Uyi.Tools.FilterWord.PoolManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.FilterWord.Dispose">
            <summary>
            对象释放
            </summary>
        </member>
        <member name="T:Uyi.Tools.FilterWord.WordGroup">
            <summary>
            具有相同首字符的词组集合
            </summary>
        </member>
        <member name="F:Uyi.Tools.FilterWord.WordGroup.groupList">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:Uyi.Tools.FilterWord.WordGroup.Add(System.String)">
            <summary>
            添加词
            </summary>
            <param name="word"></param>
        </member>
        <member name="P:Uyi.Tools.FilterWord.WordGroup.Count">
            <summary>
            获取总数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.FilterWord.WordGroup.GetWord(System.Int32)">
            <summary>
            根据下标获取词
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Tools.FilterWordPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.FilterWordPool.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.FilterWordPool.#ctor(System.String)">
            <summary>
            初始化操作
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:Uyi.Tools.FilterWordPool.Path">
            <summary>
            词典文件路径
            </summary>
        </member>
        <member name="M:Uyi.Tools.FilterWordPool.Filter(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="sourctText"></param>
            <param name="replaceChar"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.FilterWordPool.FilterAsync(System.String,System.Char,Uyi.UyiAction{System.String})">
            <summary>
            执行一个异步的敏感词过滤操作
            </summary>
            <param name="sourctText"></param>
            <param name="replaceChar"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Uyi.Tools.FilterWordPool.Dispose">
            <summary>
            对象释放
            </summary>
        </member>
        <member name="T:Uyi.Tools.IMessageQueue`1">
            <summary>
            提供消息队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Uyi.Tools.IMessageQueue`1.Clear">
            <summary>
            清空消息队列
            </summary>
        </member>
        <member name="E:Uyi.Tools.IMessageQueue`1.Disposed">
            <summary>
            队列被释放的通知事件
            </summary>
        </member>
        <member name="M:Uyi.Tools.IMessageQueue`1.Enqueue(`0)">
            <summary>
            将消息排入消息队列集合内
            </summary>
            <param name="item"></param>
        </member>
        <member name="E:Uyi.Tools.IMessageQueue`1.MessageComing">
            <summary>
            消息队列内的消息到达通知方法
            </summary>
        </member>
        <member name="T:Uyi.Tools.MessageQueue`1">
            <summary>
            该类提供一种一致的消息处理能力，重构 MessageQueue 实现逻辑；
            该类是线程安全的
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Uyi.Tools.MessageQueue`1._threadProvider">
            <summary>
            消息队列处理线程调度器，一般指定为线程池调度器
            </summary>
        </member>
        <member name="F:Uyi.Tools.MessageQueue`1.IsProcessSuccess">
            <summary>
            指示当前消息是否已经成功处理
            </summary>
        </member>
        <member name="F:Uyi.Tools.MessageQueue`1.tryCount">
            <summary>
            指示消息处理失败的重试时间，消息队列会被挂起
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.SetFailRequestCurrentMesage">
            <summary>
            报告消息队列当前的消息处理失败，需要重新执行幂等逻辑，消息队列会重复通知处理当前消息，业务逻辑保证消息幂等处理逻辑的正确性
            </summary>
            <returns>操作成功的状态，如果操作成功则为true ,否则为false</returns>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.#ctor">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="haschecktimer"></param>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.#ctor(Uyi.Threading.IUyiThreadPoolProvider)">
            <summary>
            
            </summary>
            <param name="threadProvider"></param>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.#ctor(System.Boolean,Uyi.Threading.IUyiThreadPoolProvider)">
            <summary>
            
            </summary>
            <param name="haschecktimer"></param>
            <param name="threadProvider"></param>
        </member>
        <member name="F:Uyi.Tools.MessageQueue`1.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Tools.MessageQueue`1.MessageComing">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.OnDisposing(System.Object,System.EventArgs)">
            <summary>
            触发实例被释放前通知事件
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.OnMessageComing(Uyi.Tools.MessageEventArgs{`0})">
            <summary>
            触发新消息入队处理处理事件
            </summary> 
            <param name="e">所包含的事件参数对象</param>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到集合结尾处
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.Clear">
            <summary>
            清理消息队列上的所有未处理消息
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.Dispose">
            <summary>
            释放消息队列
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueue`1.Restart">
            <summary>
            重启消息队列的处理循环
            </summary>
        </member>
        <member name="P:Uyi.Tools.MessageQueue`1.IsRunning">
            <summary>
            获取一个值,该值表示当前消息队列是否被线程池启动处理
            </summary>
        </member>
        <member name="T:Uyi.Tools.MessageEventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Uyi.Tools.MessageEventArgs`1.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Tools.MessageQueueMultiple`1">
            <summary>
            提供一种一致的消息处理能力，这个可以控制处理消息的线程数量，任务可以在多个线程中同步执行，一般消息互不干扰的情况下可以使用该类
            该类是线程安全的
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Uyi.Tools.MessageQueueMultiple`1.#ctor">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueueMultiple`1.#ctor(System.EventHandler{Uyi.Tools.MessageEventArgs{`0}})">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueueMultiple`1.#ctor(System.Int32)">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueueMultiple`1.#ctor(System.Int32,System.EventHandler{Uyi.Tools.MessageEventArgs{`0}})">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="F:Uyi.Tools.MessageQueueMultiple`1.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Tools.MessageQueueMultiple`1.MessageComing">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueueMultiple`1.OnDisposing(System.Object,System.EventArgs)">
            <summary>
            触发实例被释放前通知事件
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueueMultiple`1.OnMessageComing(System.Object,Uyi.Tools.MessageEventArgs{`0})">
            <summary>
            触发新消息入队处理处理事件
            </summary>
            <param name="sender"></param>
            <param name="e">所包含的事件参数对象</param>
        </member>
        <member name="M:Uyi.Tools.MessageQueueMultiple`1.Enqueue(`0)">
            <summary>
            将对象添加到集合结尾处
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Uyi.Tools.MessageQueueMultiple`1.Clear">
            <summary>
            清理消息队列上的所有未处理消息
            </summary>
        </member>
        <member name="M:Uyi.Tools.MessageQueueMultiple`1.Dispose">
            <summary>
            释放消息队列
            </summary>
        </member>
        <member name="T:Uyi.Tools.RandomService">
            <summary>
            服务器随机数提供类，为服务器提供随机数生成服务
            </summary>
        </member>
        <member name="P:Uyi.Tools.RandomService.RndInstance">
            <summary>
            获取基础随机数提供对象
            </summary>
        </member>
        <member name="M:Uyi.Tools.RandomService.GetNewRandomNum(System.Int32,System.Int32)">
            <summary>
            提供一种机制，随机数的生成概率从高到低依次递增，非等概率的随机数生成
            </summary>
            <param name="min">最小数</param>
            <param name="max">最大数</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.RandomService.GetNewRandomNum(System.Int32,System.Int32,System.Int32)">
            <summary>
            提供一种机制，随机数的生成概率从高到低依次递增，非等概率的随机数生成
            </summary>
            <param name="min">最小数</param>
            <param name="max">最大数</param>
            <param name="count">计算基数</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.RandomService.NormalDistribution">
            <summary>
            返回两个服从正态分布N(0,1)的随机数z0 和 z1
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Tools.RandomService.private_Random">
            <summary>
            随机数生成服务对象
            </summary>
        </member>
        <member name="T:Uyi.Tools.IRandom">
            <summary>
            定义一个接口，该接口定义提供随机数生成必须实现的方法
            </summary>
        </member>
        <member name="M:Uyi.Tools.IRandom.NextDouble">
            <summary>
            随机生成一个大于等于0.0且小于等于1.0的一个双精度的浮点型数值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.IRandom.Next(System.Int32,System.Int32)">
            <summary>
            生成一个大于等于最小值且小于最大值的随机整数
            </summary>
            <param name="min">随机数的最小值，随机数可以取该最小值</param>
            <param name="max">随机数最大值，随机数不可以取得该最大值</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.IRandom.NextBytes(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Uyi.Tools.TimerService">
            <summary>
            定时器服务提供程序
            </summary>
        </member>
        <member name="P:Uyi.Tools.TimerService.Count">
            <summary>
            获取当前定时的数量
            </summary>
        </member>
        <member name="M:Uyi.Tools.TimerService.RegistrationTimer(Uyi.Tools.ServerTimerBase)">
            <summary>
            注册定时器,将定时器添加到定时器集合以便宿主提供计时服务
            </summary>
            <param name="timer"></param>
        </member>
        <member name="M:Uyi.Tools.TimerService.DestroyTimer(System.Int64)">
            <summary>
            销毁定时器
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Uyi.Tools.TimerService.CreateServerTimer(Uyi.Tools.TimerCallBackDelegate,System.Int32)">
            <summary>
            创建一个基础的服务器定时器实例
            </summary>
            <param name="callback">定时器回调执行的函数</param>
            <param name="timeInterval">定时器时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.TimerService.CreateServerTimer(Uyi.Tools.TimerCallBackDelegate,System.TimeSpan)">
            <summary>
            创建一个基础的服务器定时器实例,这个定时器会在每日指定的时间到达时执行方法
            </summary>
            <param name="callback">需要定时执行的方法</param>
            <param name="time">事件执行的定时时间定时时间</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.TimerService.WaitRunHandle(Uyi.UyiAction,System.Int32,Uyi.Tools.IInvokeHandle)">
            <summary>
            
            </summary>
            <param name="callBack"></param>
            <param name="timeInterval"></param>
            <param name="targer"></param>
        </member>
        <member name="M:Uyi.Tools.TimerService.WaitRunHandle(Uyi.UyiAction,System.Int32)">
            <summary>
            
            </summary>
            <param name="callBack"></param>
            <param name="timeInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.TimerService.SetTimerServiceInterval(System.Int32)">
            <summary>
            设置服务器定时器最小基本时间间隔，以毫秒为单位
            请慎重设置其时间间隔参数，所设置的时间作为定时器动作最小时间间隔
            </summary>
            <param name="baseInterval">需要调整的时间间隔数值</param>
        </member>
        <member name="T:Uyi.Tools.ServerTimerBase">
            <summary>
            为计时器服务对象提供抽象基类
            </summary>
        </member>
        <member name="M:Uyi.Tools.ServerTimerBase.Tick(System.DateTime)">
            <summary>
            计时 Tick方法，由基础计时服务程序调用
            </summary>
        </member>
        <member name="M:Uyi.Tools.ServerTimerBase.SystemEventsTimeChangedInitializer">
            <summary>
            系统时间修改触发的初始化方法
            </summary>
        </member>
        <member name="M:Uyi.Tools.ServerTimerBase.Next(System.Boolean)">
            <summary>
            当计时器时间到达时计算下一个计时周期的触发时间
            </summary>
            <param name="init">是否初始化计时服务，如果是初始化计时服务当以当前时间初始化计时对象服务</param>
        </member>
        <member name="M:Uyi.Tools.ServerTimerBase.TimeEnd(System.DateTime)">
            <summary>
            计算计时服务的对象时间是否已经到达本次计时周期
            </summary>
            <returns></returns>
        </member>
        <member name="P:Uyi.Tools.ServerTimerBase.ID">
            <summary>
            服务器定时器ID，全局唯一
            </summary>
        </member>
        <member name="P:Uyi.Tools.ServerTimerBase.IsRuning">
            <summary>
            表示定时器是否正在运行
            </summary>
        </member>
        <member name="M:Uyi.Tools.ServerTimerBase.Stop">
            <summary>
            停止并销毁定时器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.ServerTimerBase.Start">
            <summary>
            启动定时器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Tools.ServerTimerBase.Restart">
            <summary>
            重新启动定时器
            </summary>
        </member>
        <member name="M:Uyi.Tools.ServerTimerBase.TimerTick">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Tools.ServerTimerBase.Dispose">
            <summary>
            销毁计时器对象
            </summary>
        </member>
        <member name="T:Uyi.Tools.IServerTimerBase">
            <summary>
            定义一个接口，该接口提供对服务器定时器创建必须实现的方法
            </summary>
        </member>
        <member name="P:Uyi.Tools.IServerTimerBase.ID">
            <summary>
            计时器的ID
            </summary>
        </member>
        <member name="P:Uyi.Tools.IServerTimerBase.IsRuning">
            <summary>
            表示当前计时器是否处于运行状态
            </summary>
        </member>
        <member name="P:Uyi.Tools.IServerTimerBase.TimeInterval">
            <summary>
            计时器的时间间隔
            </summary>
        </member>
        <member name="M:Uyi.Tools.IServerTimerBase.Restart">
            <summary>
            重启计时器
            </summary>
        </member>
        <member name="M:Uyi.Tools.IServerTimerBase.Start">
            <summary>
            开始计时器
            </summary>
        </member>
        <member name="M:Uyi.Tools.IServerTimerBase.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="M:Uyi.Tools.IServerTimerBase.TimerTick">
            <summary>
            计时器执行方法
            </summary>
        </member>
        <member name="T:Uyi.Tools.TimerCallBackDelegate">
            <summary>
            定义一个委托，表示计时器回调方法
            </summary>
            <param name="timer">当前触发事件的计时器对象</param>
            <returns>返回一个布尔值表示是否要立即停止当前计时的处理 如果需要立即停止则为 true 否则为 false </returns>
        </member>
        <member name="T:Uyi.Tools.IInvokeHandle">
            <summary>
            定义一个接口，实现异步操作回调处理逻辑，消息同步
            </summary>
        </member>
        <member name="M:Uyi.Tools.IInvokeHandle.Invoke(Uyi.UyiAction)">
            <summary>
            回调处理执行逻辑,一般的这些方法的实现是为了将方法的执行封送回消息队列和UI线程
            </summary>
            <param name="action">需要封送执行的方法对象</param>
        </member>
        <member name="T:Uyi.Collections.UyiIgnoreCaseStringDictory">
            <summary>
            提供一个以不区分字符串大小写的字符串为Key的字典集合实现
            </summary>
        </member>
        <member name="F:Uyi.Collections.UyiIgnoreCaseStringDictory.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Collections.UyiIgnoreCaseStringDictory.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Collections.UyiIgnoreCaseStringDictory.#ctor(System.String)">
            <summary>
            需要解析的URL查询字符串
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Uyi.Collections.UyiIgnoreCaseStringDictory.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="Urldec"></param>
        </member>
        <member name="M:Uyi.Collections.UyiIgnoreCaseStringDictory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Collections.Concurrent.ConcurrentLinkedList`1">
            <summary>
            提供一个线程安全的数据链表集合
            </summary>
        </member>
        <member name="M:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.#ctor">
            <summary>
            提供一个线程安全的数据链表集合
            </summary>
        </member>
        <member name="P:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.Add(`0)">
            <summary>
            向链表的结尾追加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.Push(`0)">
            <summary>
            在节点的开头追加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.RemoveNode(`0)">
            <summary>
            删除链表指定的一个节点对象
            </summary>
        </member>
        <member name="M:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.Pop">
            <summary>
            返回并移除链表节点的第一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.LastNode">
            <summary>
            返回并移除当前链表的最后一个链表集合的对象，如果没有则返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.NodeEnumerator">
            <summary>
            链表集合信息的枚举器
            </summary>
        </member>
        <member name="M:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.NodeEnumerator.#ctor(Uyi.Collections.Concurrent.ConcurrentLinkedList{`0}.NodeItem)">
            <summary>
            初始化一个链表信息的对象枚举器
            </summary>
            <param name="firstNode"></param>
        </member>
        <member name="T:Uyi.Collections.Concurrent.ConcurrentLinkedList`1.NodeItem">
            <summary>
            表示链表的一个节点对象信息
            </summary>
        </member>
        <member name="T:Uyi.Collections.Concurrent.ILinkedListNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Collections.Concurrent.ILinkedListNode.ObjectID">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.WcfServices.WcfServer">
            <summary>
            提供服务的主机
            </summary>
        </member>
        <member name="M:Uyi.WcfServices.WcfServer.#ctor(System.Int32,System.String,System.Object,System.Type)">
            <summary>
            提供服务的主机
            </summary>
        </member>
        <member name="M:Uyi.WcfServices.WcfServer.Start">
            <summary>
            /
            </summary>
        </member>
        <member name="M:Uyi.WcfServices.WcfServer.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.WebSocketServer.IWebSocketSession">
            <summary>
            定义一个接口，其表示一个 WebSocket 在会话期间的操作信息对象
            </summary>
        </member>
        <member name="P:Uyi.WebSocketServer.IWebSocketSession.ClientAddress">
            <summary>
            获取当前客户端连接远端IP地址
            </summary>
        </member>
        <member name="P:Uyi.WebSocketServer.IWebSocketSession.MessageComing">
            <summary>
            表示当前会话消息到达的事件通知方法
            </summary>
        </member>
        <member name="P:Uyi.WebSocketServer.IWebSocketSession.WebSocketSessionClose">
            <summary>
            表示当前连接关闭的通知事件方法
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.IWebSocketSession.Dispose">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.IWebSocketSession.Send(System.String)">
            <summary>
            发送文本数据
            </summary>
            <param name="message">需要发送的文本数据</param>
        </member>
        <member name="M:Uyi.WebSocketServer.IWebSocketSession.Send(System.Byte[])">
            <summary>
            发送二进制数据
            </summary>
            <param name="data">表示需要发送的二进制数据</param>
        </member>
        <member name="P:Uyi.WebSocketServer.IWebSocketSession.SessionId">
            <summary>
            连接的会话Id
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.IWebSocketSession.Ping">
            <summary>
            向对端发送一条Ping指令
            </summary>
        </member>
        <member name="P:Uyi.WebSocketServer.IWebSocketSession.BaseSocket">
            <summary>
            获取当前连接的基础套接字对象
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.IWebSocketSession.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向对端发送数据
            </summary>
            <param name="buffer">数据缓冲区</param>
            <param name="offset">数据起始偏移量</param>
            <param name="count">数据数量</param>
        </member>
        <member name="T:Uyi.WebSocketServer.Pipeline.WebSocket2IPipeline">
            <summary>
            完成一个webSocket到平台管理通讯管道 IPipelineSocket 的包装器
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.Pipeline.WebSocket2IPipeline.#ctor(Uyi.WebSocketServer.IWebSocketSession)">
            <summary>
            完成一个webSocket到平台管理通讯管道 Socket 的包装器
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:Uyi.WebSocketServer.WebMessageData">
            <summary>
            类WebMessageData的注释信息
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebMessageData.MessageId">
            <summary>
            消息编号
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebMessageData.Data">
            <summary>
            欲发送的数据
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebMessageData.OpCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebMessageData.Ping">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.WebSocketServer.WebSocketOpcode">
            <summary>
            表示 WebSocketOpcode 操作类型值
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketOpcode.Unkonown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketOpcode.Go">
            <summary>
            代表一个继续帧
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketOpcode.Text">
            <summary>
            代表一个文本帧
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketOpcode.Binary">
            <summary>
            代表一个二进制帧
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketOpcode.Close">
            <summary>
            代表连接关闭
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketOpcode.Ping">
            <summary>
            代表ping
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketOpcode.Pong">
            <summary>
            代表pong
            </summary>
        </member>
        <member name="T:Uyi.WebSocketServer.ParsePacketInternalCode">
            <summary>
            数据解析操作结果数据
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.ParsePacketInternalCode.Success">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.ParsePacketInternalCode.HasNextData">
            <summary>
            还有后续数据
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.ParsePacketInternalCode.ErrorData">
            <summary>
            错误数据
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.ParsePacketInternalCode.NotAllData">
            <summary>
            数据分片不完整
            </summary>
        </member>
        <member name="T:Uyi.WebSocketServer.WebSocketServer">
            <summary>
            表示 WebSocket 的服务连接监听器
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketServer.Listen">
            <summary>
             维持服务WebSocket连接的下层Tcp连接监听器实例
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketServer.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个新的 <see cref="T:Uyi.WebSocketServer.WebSocketServer"/> 实例
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketServer.#ctor">
            <summary>
            实例化一个新的 <see cref="T:Uyi.WebSocketServer.WebSocketServer"/> 实例
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketServer.Initializer(System.String,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketServer.Start">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketServer.Listen_Accepted(System.Object,Uyi.Net.Pipeline.AcceptedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Uyi.WebSocketServer.WebSocketServer.Accepted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketServer.Stop">
            <summary>
            停止监听服务
            </summary>
        </member>
        <member name="T:Uyi.WebSocketServer.WebSocketServerAcceptedArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketServerAcceptedArgs.Session">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketServerAcceptedArgs.Call">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.WebSocketServer.WebSocketSession">
            <summary>
            表示一个 WebSocket 的通讯会话信息
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.#ctor(Uyi.Net.IPipelineSocket,Uyi.WebSocketServer.WebSocketServer)">
            <summary>
             初始化一个新的 <see cref="T:Uyi.WebSocketServer.WebSocketSession"/> 实例
            </summary>
            <param name="acceptSocket">监听器完成连接的基础通讯连接</param>
            <param name="webSocketServer">表示当前连接所属的连接服务监听器</param>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.AcceptSocket_Disposed(System.Object,System.EventArgs)">
            <summary>
            表示当前当前会话被关闭的通知方法
            </summary> 
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.AcceptSocket_ReceiveCompleted(System.Object,Uyi.Net.BufferReceiveEventArgs)">
            <summary>
            当前会话收到新的数据消息的通知方法
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.SetHandle(Uyi.WebSocketServer.WebSocket_Handle)">
            <summary>
            设置消息处理函数管道
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.SendDataToClient(System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Uyi.WebSocketServer.WebSocketSession.ClientAddress">
            <summary>
            连接的远端IP
            </summary>
        </member>
        <member name="P:Uyi.WebSocketServer.WebSocketSession.SessionId">
            <summary>
            通讯操作的回话ID
            </summary>
        </member>
        <member name="P:Uyi.WebSocketServer.WebSocketSession.BaseSocket">
            <summary>
            获取当前通讯的支撑基础Socket对象
            </summary>
        </member>
        <member name="P:Uyi.WebSocketServer.WebSocketSession.MessageComing">
            <summary>
            消息到来的时间处理方法
            </summary>
        </member>
        <member name="P:Uyi.WebSocketServer.WebSocketSession.WebSocketSessionClose">
            <summary>
            会话连接关系的处理方法
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.OnMessageComing(Uyi.WebSocketServer.WebSocketSessionMessageComingArg)">
            <summary>
            消息到来的时间处理方法
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.OnWebSocketSessionClose">
            <summary>
            会话连接关系的处理方法
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.OnConnect(System.Action)">
            <summary>
            通知一个连接建立完成
            </summary>
            <param name="callBack"></param>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.Send(System.String)">
            <summary>
            发送文本数据
            </summary>
            <param name="message">需要发送的文本数据消息</param>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.Send(System.Byte[])">
            <summary>
            发送二进制数据
            </summary>
            <param name="data">需要发送的二进制数据</param>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送二进制数据
            </summary>
            <param name="buffer">需要发送数据缓冲区</param>
            <param name="offset">发送数据偏移量</param>
            <param name="count">发送数据的数量</param>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.Dispose">
            <summary>
            释放对象资源
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSession.Ping">
            <summary>
            向对端发送一条Ping指令
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.__.GetAsciiBytes(System.String)">
            <summary>
            获取指定字符串的Ascii编码字节数据
            </summary>
            <param name="str">需要转换的字符串</param>
            <returns>返回转换后的数据</returns>
        </member>
        <member name="M:Uyi.WebSocketServer.__.GetUtf8Bytes(System.String)">
            <summary>
            获取指定字符串的Utf8编码字节数据
            </summary>
            <param name="str">需要转换的字符串</param>
            <returns>返回转换后的数据</returns>
        </member>
        <member name="T:Uyi.WebSocketServer.WebSocketSessionMessageComingArg">
            <summary>
            表示一个WebSocket接收数据时的通知对象
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSessionMessageComingArg.#ctor(System.Byte[])">
            <summary>
            实例化一个新的 <see cref="T:Uyi.WebSocketServer.WebSocketSessionMessageComingArg"/> 实例
            </summary>
            <param name="buffer">初始化的接收的负载数据</param>
        </member>
        <member name="P:Uyi.WebSocketServer.WebSocketSessionMessageComingArg.PayData">
            <summary>
            数据缓冲区
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketSessionMessageComingArg.Opcode">
            <summary>
            指示数据类别
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketSessionMessageComingArg.Offset">
            <summary>
            接收数据的偏移量
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocketSessionMessageComingArg.Count">
            <summary>
            接收数据的数量
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSessionMessageComingArg.ToString">
            <summary>返回表示当前 <see cref="T:Uyi.WebSocketServer.WebSocketSessionMessageComingArg" /> 的 <see cref="T:System.String" />。</summary>
            <returns>
            <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Uyi.WebSocketServer.WebSocketSslServer">
            <summary>
            表示一个使用指定证书验证的安全WebSocket 服务监听器
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocketSslServer.#ctor(System.String,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            创建一个新的 <see cref="T:Uyi.WebSocketServer.WebSocketSslServer"/> 实例
            </summary>
            <param name="ip">绑定监听器的Ip</param>
            <param name="port">绑定监听的端口</param>
            <param name="serverCertificate">需要使用的监听器连接证书</param>
        </member>
        <member name="T:Uyi.WebSocketServer.WebSocketHandleProcessV13">
            **********************************************************/
        </member>
        <member name="T:Uyi.WebSocketServer.WebSocket_Handle">
            <summary>
            提供websocket数据传输操作的杂项方法
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocket_Handle.MaxServerVer">
            <summary>
            服务器接口版本号
            </summary>
        </member>
        <member name="F:Uyi.WebSocketServer.WebSocket_Handle.AcceptRequest">
            <summary>
            服务器接收客户端连接请求的响应头格式化文本
            </summary>
        </member>
        <member name="P:Uyi.WebSocketServer.WebSocket_Handle.WebSocketSession">
            <summary>
            表示当前 WebSocket 通讯回话对象
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocket_Handle.#ctor(Uyi.WebSocketServer.WebSocketSession)">
            <summary>
            构造方法
            </summary>
            <param name="webSocketSession"></param>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocket_Handle.Initializer">
            <summary>
            对象初始化操作
            </summary>
        </member>
        <member name="M:Uyi.WebSocketServer.WebSocket_Handle.ProcessReceive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            数据接收完成的处理函数
            </summary>
            <param name="buffer">数据的缓冲区</param>
            <param name="offset">数据偏移量</param>
            <param name="count">接收数据的数量</param>
        </member>
        <member name="T:Uyi.WebSocketServer.UyiWebsocketDebug">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.WebSocketClient.WebSocketClient">
            <summary>
            表示一个 WebSocket 客户端对象
            </summary>
        </member>
        <member name="F:Uyi.WebSocketClient.WebSocketClient.RequestHeader">
            <summary>
            请求头,WebSocket 非标准基础请求头样本
            </summary>
        </member>
        <member name="F:Uyi.WebSocketClient.WebSocketClient.WSocket">
            <summary>
            实例化基础的Tcp通讯管道
            </summary>
        </member>
        <member name="M:Uyi.WebSocketClient.WebSocketClient.ConnectByUrl(System.String)">
            <summary>
            连接到远端的服务器地址
            </summary>
            <param name="url">远端的Ip</param> 
        </member>
        <member name="F:Uyi.WebSocketClient.WebSocketClient._isDisposed">
            <summary>
            指示当前的对象是否已经被释放
            </summary>
        </member>
        <member name="F:Uyi.WebSocketClient.WebSocketClient.OnConnecting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.WebSocketClient.WebSocketClient.OnConnected">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.WebSocketClient.WebSocketClient.OnDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.WebSocketClient.WebSocketClient.ClientAddress">
            <summary>
            当前连接的客户端Ip地址
            </summary>
        </member>
        <member name="P:Uyi.WebSocketClient.WebSocketClient.CurrentSession">
            <summary>
            档案连接的会话对象信息
            </summary>
        </member>
        <member name="P:Uyi.WebSocketClient.WebSocketClient.SessionID">
            <summary>
            连接的会话编号
            </summary>
        </member>
        <member name="M:Uyi.WebSocketClient.WebSocketClient.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.WebSocketClient.WebSocketClient.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.WebSocketClient.WebSocketClient.WebSocketHandle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.WebSocketClient.WebSocketClient.WebClientSession">
            <summary>
            表示一个客户端的连接通讯会话对象
            </summary>
        </member>
        <member name="M:Uyi.WebSocketClient.WebSocketClient.WebClientSession.#ctor(Uyi.WebSocketClient.WebSocketClient)">
            <summary>
            初始化新实例
            </summary>
            <param name="webSocketClient"></param>
        </member>
        <member name="P:Uyi.WebSocketClient.WebSocketClient.WebClientSession.ClientAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.WebSocketClient.WebSocketClient.WebClientSession.SessionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.WebSocketClient.WebSocketClient.WebClientSession.MessageComing">
            <summary>
            数据消息到达时的通知
            </summary>
        </member>
        <member name="P:Uyi.WebSocketClient.WebSocketClient.WebClientSession.WebSocketSessionClose">
            <summary>
            连接关闭时的回调通知
            </summary>
        </member>
        <member name="P:Uyi.WebSocketClient.WebSocketClient.WebClientSession.BaseSocket">
            <summary>
            获取当前连接的基础套接字对象
            </summary>
        </member>
        <member name="M:Uyi.WebSocketClient.WebSocketClient.WebClientSession.Ping">
            <summary>
            向对端发送一条Ping指令
            </summary>
        </member>
        <member name="T:Uyi.Web.RestfulApi.AlipayWebParamData">
            <summary>
            类AlipayWebParamData的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.AlipayWebParamData.#ctor">
            <summary>
            类WeiXinPayWebParamData的默认构造函数
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.AlipayWebParamData.FromXml(System.String)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.AlipayWebParamData.FromJson(System.String)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.AlipayWebParamData.FromUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.AlipayWebParamData.MarkSign(System.Boolean,System.String[])">
            <summary>
            
            </summary>
            <param name="addsign"></param>
            <param name="secrets"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.AlipayWebParamData.VerifySign(System.String[])">
            <summary>
            
            </summary>
            <param name="secrets"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.RestfulApi.QCloudWebParamData">
            <summary>
            腾讯云接口签名支持类
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.QCloudWebParamData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Web.RestfulApi.QCloudWebParamData.Action">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:Uyi.Web.RestfulApi.QCloudWebParamData.SecretId">
            <summary>
            密钥Id
            </summary>
        </member>
        <member name="P:Uyi.Web.RestfulApi.QCloudWebParamData.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="P:Uyi.Web.RestfulApi.QCloudWebParamData.Nonce">
            <summary>
            随机串
            </summary>
        </member>
        <member name="P:Uyi.Web.RestfulApi.QCloudWebParamData.Region">
            <summary>
            接口区域
            </summary>
        </member>
        <member name="P:Uyi.Web.RestfulApi.QCloudWebParamData.Signature">
            <summary>
            请求签名
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.QCloudWebParamData.MarkTimestamp">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.QCloudWebParamData.MarkSign(System.Boolean,System.String[])">
            <summary>
            
            </summary>
            <param name="addsign"></param>
            <param name="secrets"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.RestfulApi.ShenPayWebParamData">
            <summary>
            神付通
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.ShenPayWebParamData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.ShenPayWebParamData.MarkSign(System.Boolean,System.String[])">
            <summary>
            
            </summary>
            <param name="addsign"></param>
            <param name="secrets"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.ShenPayWebParamData.VerifySign(System.String[])">
            <summary>
            
            </summary>
            <param name="secrets"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.ShenPayWebParamData.ToUrlNoEncode(Uyi.Web.CheckUrlKeyCall)">
            <summary>
            
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.RestfulApi.TypeWebParamDataBase`1">
            <summary>
            类TypeWebParamDataBase的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.TypeWebParamDataBase`1.#ctor">
            <summary>
            初始化一个默认实例
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.TypeWebParamDataBase`1.#ctor(System.Boolean)">
            <summary>
            初始化一个新实例
            </summary>
            <param name="ignoreCase">表示当前是否忽略大小写</param>
        </member>
        <member name="M:Uyi.Web.RestfulApi.TypeWebParamDataBase`1.FromXml(System.String)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.TypeWebParamDataBase`1.FromJson(System.String)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.TypeWebParamDataBase`1.FromUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.RestfulApi.WeiXinPayWebParamData">
            <summary>
            类WeiXinPayWebParamData的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.WeiXinPayWebParamData.#ctor">
            <summary>
            类WeiXinPayWebParamData的默认构造函数
            </summary>
        </member>
        <member name="M:Uyi.Web.RestfulApi.WeiXinPayWebParamData.FromXml(System.String)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.WeiXinPayWebParamData.FromJson(System.String)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.WeiXinPayWebParamData.FromUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.RestfulApi.WeiXinPayWebParamData.MarkSign(System.Boolean,System.String[])">
            <summary>
            
            </summary>
            <param name="addsign"></param>
            <param name="secrets"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.Session.IWebDataSerializer">
            <summary>
            为对象基础验证和序列化操作定义操作接口
            </summary>
        </member>
        <member name="M:Uyi.Web.Session.IWebDataSerializer.Serializer(System.String)">
            <summary>
            序列化当前对象
            </summary>
            <param name="secret">提供序列化密钥</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.Session.IWebDataSerializer.VerifySign(System.String)">
            <summary>
            验证密钥签名的正确性
            </summary>
            <param name="secret"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.Session.IWebDataSerializer.CheckTimeOut(System.Int32)">
            <summary>
            验证当前的请求是否过期
            </summary>
            <param name="ex_time"></param>
            <returns></returns>
        </member>
        <member name="P:Uyi.Web.Session.IWebDataSerializer.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Uyi.Web.Session.WebDataSerializerBase`1">
            <summary>
            提供对象基础验证和序列化操作
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Uyi.Web.Session.WebDataSerializerBase`1.MemoryCompare(System.Byte[],System.Byte[])">
            <summary>
            比较字节数组
            </summary>
            <param name="b1">字节数组1</param>
            <param name="b2">字节数组2</param>
            <returns>如果两个数组相同，返回0；如果数组1小于数组2，返回小于0的值；如果数组1大于数组2，返回大于0的值。</returns>
        </member>
        <member name="F:Uyi.Web.Session.WebDataSerializerBase`1.serializer">
            <summary>
            指定类型 T 的类型序列化器
            </summary>
        </member>
        <member name="M:Uyi.Web.Session.WebDataSerializerBase`1.GetSerializerData(System.String)">
            <summary>
            将Base64字符串反序列化成对象
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.Session.WebDataSerializerBase`1.GetBase64String(System.Object)">
            <summary>
            把对象序列化成字符串的表示形式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.Session.WebDataSerializerBase`1.MarkSign(System.String)">
            <summary>
            
            </summary>
            <param name="secret"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.Session.WebDataSerializerBase`1.VerifySign(System.String)">
            <summary>
            
            </summary>
            <param name="secret"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.Session.WebDataSerializerBase`1.MarkTimestamp">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Web.Session.WebDataSerializerBase`1.CheckTimeOut(System.Int32)">
            <summary>
            检查当前请求是否已经超时
            </summary>
            <param name="timespan">验证超时阈值（单位：秒）</param>
            <returns>返回一个布尔值表示当前的请求是否超时，如果已超时返回 true 否则 返回 false</returns>
        </member>
        <member name="M:Uyi.Web.Session.WebDataSerializerBase`1.Serializer(System.String)">
            <summary>
            
            </summary>
            <param name="secret"></param>
            <returns></returns>
        </member>
        <member name="F:Uyi.Web.Session.WebDataSerializerBase`1.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Web.Session.WebDataSerializerBase`1.Sign">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Web.Session.WebDataSerializerBase`1.Version">
            <summary>
            请求数据的版本
            </summary>
        </member>
        <member name="T:Uyi.Web.Session.WebDataSerializerProviderBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Web.Session.WebDataSerializerProviderBase.GetDataVersion(System.String,System.String@,System.Byte@)">
            <summary>
            
            </summary>
            <param name="session_key"></param>
            <param name="base64Str"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.WebModelBase`1">
            <summary>
            类WebModelBase的注释信息
            </summary>
        </member>
        <member name="T:Uyi.Web.WebModelBase`1.delGetDataFromDb">
            <summary>
            一个获取配置数据的委托
            </summary>
            <param name="key">需要获取数据的键</param>
            <param name="expries_time">当前对象的过期缓存时间</param>
            <returns>返回获取的对象</returns>
        </member>
        <member name="P:Uyi.Web.WebModelBase`1.Key">
            <summary>
            当前请求的Key
            </summary>
        </member>
        <member name="P:Uyi.Web.WebModelBase`1.GetDataFromDb">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Web.WebModelBase`1.CacheTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Web.WebModelBase`1._cacheData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Web.WebModelBase`1.GetCacheInstanceData(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Uyi.Web.WebModelBase`1.EmptyInstance">
            <summary>
            读取一个空的实例信息
            </summary>
        </member>
        <member name="T:Uyi.Web.IWebModelBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:Uyi.Web.IWebModelBase.Key">
            <summary>
            数据键
            </summary>
        </member>
        <member name="T:Uyi.Web.HttpHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Web.HttpHelper.baseEncoding">
            <summary>
            HTTP网页的内容的基础编码方式
            </summary>
        </member>
        <member name="M:Uyi.Web.HttpHelper.GetResponseUrl(System.String,System.String)">
            <summary>
            对Http地址发起get请求，并直接获取响应对象
            </summary>
            <param name="url"></param>
            <param name="referer"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.GetStringFromResponse(System.Net.HttpWebResponse)">
            <summary>
            
            </summary>
            <param name="httpResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.GetStringFromResponse(System.Net.HttpWebResponse,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="httpResponse"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.GetResponseStringUrl(System.String,System.String)">
            <summary>
            获取指定URL的URL响应结果
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.GetResponseStringUrlProxy(System.String,System.String,System.String)">
            <summary>
            获取指定URL的URL响应结果
            </summary>
            <param name="url"></param>
            <param name="proxy"></param>
            <param name="referer"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BegionGetResponseStringUrlProxy(System.String,System.String,System.Action{System.String},System.String)">
            <summary>
            获取指定URL的URL响应结果
            </summary>
            <param name="url"></param>
            <param name="proxy"></param>
            <param name="callback"></param>
            <param name="referer"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.PostResponseUrl(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            对Http地址发起post请求，并直接获取响应对象
            </summary>
            <param name="url"></param>
            <param name="queryStream"></param>
            <param name="isFormData">表示当前提交的参数是不是表单提交的参数，如果是则会修改文档类型。参数需要进行url编码</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.PostResponseUrl(System.String,System.String,System.Boolean)">
            <summary>
            对Http地址发起post请求，并直接获取响应对象
            </summary>
            <param name="url"></param>
            <param name="queryString"></param>
            <param name="isFormData"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.PostResponseStringUrl(System.String,System.String,System.Boolean)">
            <summary>
            对服务器地址发起post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="queryString">请求参数</param>
            <param name="isFormData"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.PostResponseStringUrl(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            对服务器地址发起post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="queryStream">请求参数</param>
            <param name="isFormData">指示当前的数据是否是表单数据</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.PostFromData(System.String,Uyi.Web.IWebParamData,PostFromDataParam{Uyi.Web.PostFileData})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="_query"></param>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.PostFromDataString(System.String,Uyi.Web.IWebParamData,PostFromDataParam{Uyi.Web.PostFileData})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="_query"></param>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BeginGetResponseStringUrl(System.String,Uyi.UyiAction{System.String,System.Exception})">
            <summary>
            对一个url发起异步的http请求
            </summary>
            <param name="url">请求url</param>
            <param name="callback">请求完成结果回调</param>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BeginGetResponseUrl(System.String,Uyi.UyiAction{System.Net.HttpWebResponse,System.Exception})">
            <summary>
            一个url发起异步的http请求
            </summary>
            <param name="url"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BeginPostFromData(System.String,Uyi.Web.IWebParamData,PostFromDataParam{Uyi.Web.PostFileData},Uyi.UyiAction{System.Net.HttpWebResponse,System.Exception})">
            <summary>
            一个url发起异步的http请求
            </summary>
            <param name="url"></param>
            <param name="_query"></param>
            <param name="files"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BeginPostFromDataString(System.String,Uyi.Web.IWebParamData,PostFromDataParam{Uyi.Web.PostFileData},Uyi.UyiAction{System.String,System.Exception})">
            <summary>
            一个url发起异步的http请求
            </summary>
            <param name="url"></param>
            <param name="_query"></param>
            <param name="files"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BeginPostResponseUrl(System.String,System.IO.Stream,System.Boolean,Uyi.UyiAction{System.Net.HttpWebResponse,System.Exception})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="queryStream"></param>
            <param name="isFormData"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BeginPostResponseUrl(System.String,System.String,System.Boolean,Uyi.UyiAction{System.Net.HttpWebResponse,System.Exception})">
            <summary>
            对Http地址发起post请求，并直接获取响应对象
            </summary>
            <param name="url"></param>
            <param name="queryString"></param>
            <param name="isFormData"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BeginPostResponseStringUrl(System.String,System.IO.Stream,System.Boolean,Uyi.UyiAction{System.String,System.Exception})">
            <summary>
            对服务器地址发起post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="queryStream">请求参数</param>
            <param name="callback"></param>
            <param name="isFormData"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BeginPostResponseStringUrl(System.String,System.String,System.Boolean,Uyi.UyiAction{System.String,System.Exception})">
            <summary>
            对服务器地址发起post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="queryString">请求参数</param>
            <param name="callback"></param>
            <param name="isFormData"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.BuildSecureString(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns> 
        </member>
        <member name="M:Uyi.Web.HttpHelper.CertPostResponseUrl(System.String,System.String,System.Security.SecureString,System.IO.Stream,System.Boolean)">
            <summary>
            对Http地址发起post请求，并直接获取响应对象
            </summary>
            <param name="url">请求的Url</param>
            <param name="queryStream"></param>
            <param name="certFileName"></param>
            <param name="certPassword"></param>
            <param name="isFormData">表示当前提交的参数是不是表单提交的参数，如果是则会修改文档类型。参数需要进行url编码</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.CertPostResponseUrl(System.String,System.String,System.Security.SecureString,System.String,System.Boolean)">
            <summary>
            对Http地址发起post请求，并直接获取响应对象
            </summary>
            <param name="url"></param>
            <param name="queryString"></param>
            <param name="certFileName"></param>
            <param name="certPassword"></param>
            <param name="isFormData"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.CertPostResponseStringUrl(System.String,System.String,System.Security.SecureString,System.String,System.Boolean)">
            <summary>
            对服务器地址发起post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="queryString">请求参数</param>
            <param name="certFileName"></param>
            <param name="certPassword"></param>
            <param name="isFormData"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.HttpHelper.CertPostResponseStringUrl(System.String,System.String,System.Security.SecureString,System.IO.Stream,System.Boolean)">
            <summary>
            对服务器地址发起post请求
            </summary>
            <param name="url">请求地址</param>
            <param name="certFileName"></param>
            <param name="certPassword"></param>
            <param name="queryStream">请求参数</param>
            <param name="isFormData">指示当前的数据是否是表单数据</param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.PostFileData">
            <summary>
            文件上传的表单数据
            </summary>
        </member>
        <member name="M:Uyi.Web.PostFileData.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Uyi.Web.PostFileData.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="context"></param>
        </member>
        <member name="M:Uyi.Web.PostFileData.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="context"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Uyi.Web.PostFileData.#ctor(System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="filedata"></param>
        </member>
        <member name="M:Uyi.Web.PostFileData.#ctor(System.String,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="stream"></param>
        </member>
        <member name="P:Uyi.Web.PostFileData.FileName">
            <summary>
             文件的名称
            </summary>
        </member>
        <member name="P:Uyi.Web.PostFileData.FileData">
            <summary>
            文件流内容数据
            </summary>
        </member>
        <member name="P:Uyi.Web.PostFileData.IsHasFile">
            <summary>
            是否存在文件信息
            </summary>
        </member>
        <member name="T:Uyi.Web.HttpRequestMatch">
            <summary>
            提供 Http 请求头解析类
            </summary>
        </member>
        <member name="P:Uyi.Web.HttpRequestMatch.Method">
            <summary>
            获取当前请求的谓词
            </summary>
        </member>
        <member name="P:Uyi.Web.HttpRequestMatch.Path">
            <summary>
            请求的基础路径
            </summary>
        </member>
        <member name="P:Uyi.Web.HttpRequestMatch.QueryString">
            <summary>
            获取请求的查询参数
            </summary>
        </member>
        <member name="P:Uyi.Web.HttpRequestMatch.Header">
            <summary>
            获取请求头参数
            </summary>
        </member>
        <member name="P:Uyi.Web.HttpRequestMatch.HttpVersion">
            <summary>
            获取当前的HTTP请求的版本号
            </summary>
        </member>
        <member name="M:Uyi.Web.HttpRequestMatch.TryParse(System.String,Uyi.Web.HttpRequestMatch@)">
            <summary>
            
            </summary>
            <param name="headerBody"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.IisWorker">
            <summary>
            IIS 操作方法集合
            http://blog.csdn.net/ts1030746080/article/details/8741399
            </summary>
        </member>
        <member name="M:Uyi.Web.IisWorker.GetIIsVersion">
            <summary>
            获取本地IIS版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IisWorker.CreateWebSite(System.String,System.String,System.String,System.Boolean)">
            <summary>
            创建虚拟目录网站
            </summary>
            <param name="webSiteName">网站名称</param>
            <param name="physicalPath">物理路径</param>
            <param name="domainPort">站点+端口，如192.168.1.23:90</param>
            <param name="isCreateAppPool">是否创建新的应用程序池</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IisWorker.CreateWebSite(Uyi.Web.WebSiteInfo)">
            <summary>
            使用站点配置信息创建新的站点
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Uyi.Web.IisWorker.CreateWebSiteConsole(Uyi.Web.WebSiteInfo,System.Boolean)">
            <summary>
            使用站点配置信息创建新的站点
            </summary>
            <param name="o"></param>
            <param name="addunc"></param>
        </member>
        <member name="M:Uyi.Web.IisWorker.GetWebSites(System.String)">
            <summary>
            获取一个列表表示站点列表信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IisWorker.IsExistsWebSite(System.String)">
            <summary>
            检查指定的站点名称是否已经存在
            </summary>
            <param name="siteName">需要检查的站点名称</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IisWorker.GetWebsitePhysicalPath(System.DirectoryServices.DirectoryEntry)">
            <summary>
            得到网站的物理路径
            </summary>
            <param name="rootEntry">网站节点</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IisWorker.GetServerBindings">
            <summary>
            获取站点名
            </summary>
        </member>
        <member name="M:Uyi.Web.IisWorker.CreateAppPool(System.String,System.String,System.String)">
            <summary>
            创建应用池名称
            </summary>
            <param name="appPoolName">应用池名称</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IisWorker.SetAppToPool(System.String,System.String)">
            <summary>
            建立程序池后关联相应应用程序及虚拟目录
            </summary>
        </member>
        <member name="M:Uyi.Web.IisWorker.IsArray(System.Object)">
            <summary>
            判断object对象是否为数组
            </summary>
        </member>
        <member name="M:Uyi.Web.IisWorker.GetWebSiteId(System.String,System.DirectoryServices.DirectoryEntry@)">
            <summary>
            获取指定站点的站点id
            </summary>
            <param name="webSiteName">站点名称</param>
            <param name="siteroot"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IisWorker.GetAppPoolInfo(System.String)">
            <summary>
            获取指定应用程序池的id
            </summary> 
            <param name="poolname"></param> 
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IisWorker.RemoveWebSite(System.String)">
            <summary>
            删除指定服务器站点信息
            </summary>
            <param name="webSiteName"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IisWorker.RemoveAppPoolInfo(System.String)">
            <summary>
            
            </summary>
            <param name="poolname"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.IisInfo">
            <summary>
            表示IIS信息
            </summary>
        </member>
        <member name="P:Uyi.Web.IisInfo.AppPool">
            <summary>
            获取应用池名称
            </summary>
        </member>
        <member name="P:Uyi.Web.IisInfo.DomainPort">
            <summary>
            获取域名端口
            </summary>
        </member>
        <member name="T:Uyi.Web.WebSiteInfo">
            <summary>
            表示网站站点信息
            </summary>
        </member>
        <member name="F:Uyi.Web.WebSiteInfo.SiteId">
            <summary>
            站点编号
            </summary>
        </member>
        <member name="F:Uyi.Web.WebSiteInfo.Root">
            <summary>
            网站根目录信息
            </summary>
        </member>
        <member name="F:Uyi.Web.WebSiteInfo.VirPaths">
            <summary>
            指示站点的虚拟目录结构数组
            </summary>
        </member>
        <member name="F:Uyi.Web.WebSiteInfo.SiteName">
            <summary>
            站点名称
            </summary>
        </member>
        <member name="F:Uyi.Web.WebSiteInfo.SitePath">
            <summary>
            站点根目录
            </summary>
        </member>
        <member name="F:Uyi.Web.WebSiteInfo.BindingHost">
            <summary>
            绑定地址
            </summary>
        </member>
        <member name="T:Uyi.Web.SiteVirPathInfo">
            <summary>
            网站虚拟目录结构信息
            </summary>
        </member>
        <member name="F:Uyi.Web.SiteVirPathInfo.SiteName">
            <summary>
            站点名称
            </summary>
        </member>
        <member name="F:Uyi.Web.SiteVirPathInfo.SitePath">
            <summary>
            站点路径
            </summary>
        </member>
        <member name="F:Uyi.Web.SiteVirPathInfo.UncUserName">
            <summary>
            文件路径连接使用用户名
            </summary>
        </member>
        <member name="F:Uyi.Web.SiteVirPathInfo.UncPassword">
            <summary>
            文件路径连接使用的用户密码
            </summary>
        </member>
        <member name="F:Uyi.Web.SiteVirPathInfo.SchemaClassName">
            <summary>
            虚拟目录架构信息
            </summary>
        </member>
        <member name="F:Uyi.Web.SiteVirPathInfo.IsWebServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Web.SiteVirPathInfo.Childrens">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Web.__">
            <summary>
            扩展服务类
            </summary>
        </member>
        <member name="M:Uyi.Web.__.FindDirectoryEntry(System.DirectoryServices.DirectoryEntries,System.Func{System.DirectoryServices.DirectoryEntry,System.Boolean})">
            <summary>
            查找Iis目录实体
            </summary>
            <param name="pros"></param>
            <param name="ep"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.__.GetPropertyInfo(System.DirectoryServices.PropertyCollection)">
            <summary>
            获取目录属性信息
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.__.GetWebsiteRoot(System.DirectoryServices.DirectoryEntry)">
            <summary>
            
            </summary>
            <param name="rootEntry"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.ServerCacheManager`2">
            <summary>
            提供一个集合来缓存服务器内核服务对象，该类是线程安全的
            </summary>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.#ctor">
            <summary>
            构建一个新的缓存器
            </summary>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.#ctor(System.Int64)">
            <summary>
            构建一个新的缓存器（并指定默认的过期时间）
            <param name="expriesTime">过期时间（单位：毫秒）</param>
            </summary>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.InternalRemoveCache(Uyi.Web.ServerCacheManager{`0,`1}.CacheItem)">
            <summary>
            发送删除数据的任务
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.InternalUpgradeRemoveCache(Uyi.Web.ServerCacheManager{`0,`1}.CacheItem)">
            <summary>
            发送删除数据的任务
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.InternalAddOrUpdateValue(`0,`1,System.DateTime)">
            <summary>
            添加对象，内部调用
            </summary>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.RemoveCache(`0)">
            <summary>
            发送删除数据的任务
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Uyi.Web.ServerCacheManager`2.Item(`0)">
            <summary>
            获取或者写入一个缓存对象信息（如果写入则使用默认的写入缓存时间写入）
            </summary>
            <param name="key">获取缓存信息的键</param>
            <returns>返回获取的值，如果获取失败返回默认值</returns>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.ReadValue(`0)">
            <summary>
            获取一个缓存对象信息
            </summary>
            <param name="key">获取缓存信息的键</param>
            <returns>返回获取的值，如果获取失败返回默认值</returns>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.TryReadValue(`0,`1@)">
            <summary>
            尝试获取一个键值
            </summary>
            <param name="key">获取缓存信息的键</param>
            <param name="value">返回获取到的值</param>
            <returns>如果成功获取返回 true,如果失败返回 false</returns>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.WriteValue(`0,`1,System.DateTime)">
            <summary>
            添加或者更新对象
            </summary>
            <param name="key">需要添加或者更新</param>
            <param name="value">需要更新的内容</param>
            <param name="expires">对象过期时间</param>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.WriteValue(`0,`1,System.Int64)">
            <summary>
            添加或者更新对象
            </summary>
            <param name="key">需要添加或者更新</param>
            <param name="value">需要更新的内容</param>
            <param name="expires">对象过期时间（单位：毫秒）</param>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.WriteValue(`0,`1,System.TimeSpan)">
            <summary>
            添加或者更新对象
            </summary>
            <param name="key">需要添加或者更新</param>
            <param name="value">需要更新的内容</param>
            <param name="expires">对象过期时间</param>
        </member>
        <member name="M:Uyi.Web.ServerCacheManager`2.WriteValue(`0,`1)">
            <summary>
            写入一个对象
            </summary>
            <param name="key">要写入的键</param>
            <param name="value">要写入的值</param>
        </member>
        <member name="T:Uyi.Web.ServerCacheManager`2.CacheItem">
            <summary>
            提供对象对象缓存所需要的基础对象支持
            </summary> 
        </member>
        <member name="F:Uyi.Web.ServerCacheManager`2.CacheItem.Key">
            <summary>
            缓存对象的键
            </summary>
        </member>
        <member name="F:Uyi.Web.ServerCacheManager`2.CacheItem.Tag">
            <summary>
            需要缓存的对象信息
            </summary>
        </member>
        <member name="F:Uyi.Web.ServerCacheManager`2.CacheItem.Expires">
            <summary>
            对象的过期时间
            </summary>
        </member>
        <member name="T:Uyi.Web.WebConfigManager">
            <summary>
            提供对网站的我配置数据的获取能力
            </summary>
        </member>
        <member name="M:Uyi.Web.WebConfigManager.GetAppSettings(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.WebHelper">
            <summary>
            类WebHelper的注释信息
            </summary>
            <summary>
            网站操作辅助类
            </summary>
        </member>
        <member name="M:Uyi.Web.WebHelper.WriterTableInfo(System.Data.DataTable,System.String,System.Int32[],System.Int32,System.Int32,Uyi.Web.GetValueMethod)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="title"></param>
            <param name="size"></param>
            <param name="maxszie"></param>
            <param name="minsize"></param>
            <param name="getvalue">获取数据的方法</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebHelper.WriterTableArray(System.Data.DataTable[],System.String,Uyi.Web.GetValueMethod)">
            <summary>
            
            </summary>
            <param name="dts"></param>
            <param name="title"></param>
            <param name="getvalue">获取数据的方法</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebHelper.WriterSingleTable(System.Data.DataTable,Uyi.Web.GetValueMethod)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="getvalue">获取数据的方法</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebHelper.UrlSafeBase64Encode(System.Byte[],System.Boolean)">
            <summary>
            URL安全的字符串编码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebHelper.UrlSafeBase64Decode(System.String)">
            <summary>
            URL安全的字符串解码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebHelper.MergeUrlQueryString(System.String,Uyi.Web.IWebParamData,System.Boolean)">
            <summary>
            将参数合并到Url连接中
            </summary>
            <param name="url">需要合并参数的url</param>
            <param name="param">需要合并的参数</param>
            <param name="isCover">指定使用覆盖模式，如果需要用合并参数覆盖原url参数则为 true。如果使用原url参数覆盖合并参数则为 false </param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebHelper.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebHelper.UrlEncode(System.String)">
            <summary>
            执行URL编码
            </summary>
            <param name="str">需要编码的字符串</param> 
            <returns>返回编码后的字符串结果</returns>
        </member>
        <member name="M:Uyi.Web.WebHelper.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            将编码后的字符串结果解密
            </summary>
            <param name="str">待解密的编码字符串信息</param>
            <param name="e">编码时使用字符串编码信息</param>
            <returns>返回解码后的字符串信息</returns>
        </member>
        <member name="M:Uyi.Web.WebHelper.UrlDecode(System.String)">
            <summary>
            执行URl解码
            </summary>
            <param name="str">需要解码的字符串</param> 
            <returns>返回解码后的字符串信息</returns>
        </member>
        <member name="T:Uyi.Web.GetValueMethod">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="col"></param>
        </member>
        <member name="T:Uyi.Web.WebParamData">
            <summary>
            为网站数据传输提供参数管理及其简单的验证服务
            </summary> 
        </member>
        <member name="F:Uyi.Web.WebParamData.UTCBegin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Web.WebParamData.Sha1Encrypt(System.String,System.Text.Encoding)">
            <summary>
            采用Sha1加密协议加密字符串
            </summary>
            <param name="context"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.MD5Encrypt(System.String,System.Text.Encoding)">
            <summary>
            采用MD5加密协议加密字符串
            </summary>
            <param name="context">待加密的文本</param>
            <param name="encoding">加密文本的编码格式</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.Sha256Encrypt(System.String,System.Text.Encoding)">
            <summary>
            采用Sha256加密协议加密字符串
            </summary>
            <param name="context"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="P:Uyi.Web.WebParamData.Item(System.String)">
            <summary>
            获取或设置与指定的键相关联的值
            </summary>
            <param name="key">需要参数的键</param>
            <returns>返回指定键的值，如果获取不到则为null</returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.#ctor">
            <summary>
            初始化一个默认实例
            </summary>
        </member>
        <member name="M:Uyi.Web.WebParamData.#ctor(System.Boolean)">
            <summary>
            初始化一个新实例
            </summary>
            <param name="ignoreCase">表示当前是否忽略大小写</param>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToUrl">
            <summary>
            强键值对的数据转换为连接URL参数拼接参数格式
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToUrl(Uyi.Web.CheckUrlKeyCall)">
            <summary>
            强键值对的数据转换为连接URL参数拼接参数格式
            </summary> 
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToUrlNoEncode">
            <summary>
            强键值对的数据转换为连接URL参数拼接参数,并不对参数值进行url编码
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToUrlNoEncode(Uyi.Web.CheckUrlKeyCall)">
            <summary>
            将键值对的数据转换为连接URL参数拼接参数,并不对参数值进行url编码
            </summary> 
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToJson">
            <summary>
            将数据装换为json数据格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToXml">
            <summary>
            将数据转换为XML数据格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToParam(Uyi.Web.CheckUrlKeyCall,System.Char)">
            <summary>
            将数据转换为指定的字符边界的参数数据
            </summary>
            <param name="func"></param>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToPostHtml">
            <summary>
            获取表单数据自动提交的文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToPostHtml(System.String)">
            <summary>
            获取表单数据自动提交的文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToPostHtml(Uyi.Web.CheckUrlKeyCall)">
            <summary>
            获取表单数据自动提交的文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToPostHtml(System.String,Uyi.Web.CheckUrlKeyCall)">
            <summary>
            获取表单数据自动提交的文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToAllUrl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.FromXml(System.String)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.FromJson(System.String)">
            <summary>
            
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.FromUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.MarkSign(System.Boolean,System.String[])">
            <summary>
            计算数据的签名结果
            </summary>
            <param name="secrets">签名密钥参数组，在应对不同的数据签名时提供不同的数据签名参数</param>
            <param name="addsign">指示是否直接添加签名结果到参数集合内 将覆盖键 sign 的值</param>
            <returns>返回数据签名结果</returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.VerifySign(System.String[])">
            <summary>
            数据验签方法验证签名的正确性
            </summary>
            <param name="secrets">签名密钥参数组，在应对不同的数据签名时提供不同的数据签名参数</param>
            <returns>返回签名验证结果，如果验证通过则为 true 否则为 false</returns>
        </member>
        <member name="P:Uyi.Web.WebParamData.WebSignType">
            <summary>
            获取或者设置当前协议的加密类别 目前支持 SHA1,MD5,SHA256 三种签名方式
            </summary>
        </member>
        <member name="M:Uyi.Web.WebParamData.CheckTimeOut(System.Int32)">
            <summary>
            检查当前请求是否已经超时
            </summary>
            <param name="timespan">验证超时阈值（单位：秒）</param>
            <returns>返回一个布尔值表示当前的请求是否超时，如果已超时返回 true 否则 返回 false</returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.ToNewWebParamData(System.Boolean)">
            <summary>
            输出一个新的 WebParam 对象;
            </summary>
            <param name="ignoreCase">指示新对象是否不区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.WebParamData.RemoveTimestamp">
            <summary>
            删除时间戳
            </summary>
        </member>
        <member name="M:Uyi.Web.WebParamData.RemoveSign">
            <summary>
            删除签名
            </summary>
        </member>
        <member name="M:Uyi.Web.WebParamData.MarkTimestamp">
            <summary>
            标记时间戳
            </summary>
        </member>
        <member name="T:Uyi.Web.CheckUrlKeyCall">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.Web.IWebParamData">
            <summary>
            定义一个接口为网站数据传输提供参数管理及其简单的验证服务必须实现的方法
            </summary>
        </member>
        <member name="P:Uyi.Web.IWebParamData.Item(System.String)">
            <summary>
            获取或设置与指定的键相关联的值
            </summary>
            <param name="key">需要参数的键</param>
            <returns>返回指定键的值，如果获取不到则为null</returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.MarkSign(System.Boolean,System.String[])">
            <summary>
            计算数据的签名结果
            </summary>
            <param name="secrets">签名密钥参数组，在应对不同的数据签名时提供不同的数据签名参数</param>
            <param name="addsign">指示是否直接添加签名结果到参数集合内 将覆盖键 sign 的值</param>
            <returns>返回数据签名结果</returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToJson">
            <summary>
            将数据装换为json数据格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToParam(Uyi.Web.CheckUrlKeyCall,System.Char)">
            <summary>
            将数据转换为指定的字符边界的参数数据
            </summary>
            <param name="func"></param>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToPostHtml">
            <summary>
            获取表单数据自动提交的文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToPostHtml(System.String)">
            <summary>
            获取表单数据自动提交的文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToPostHtml(Uyi.Web.CheckUrlKeyCall)">
            <summary>
            获取表单数据自动提交的文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToPostHtml(System.String,Uyi.Web.CheckUrlKeyCall)">
            <summary>
            获取表单数据自动提交的文本内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToUrl">
            <summary>
            强键值对的数据转换为连接URL参数拼接参数格式
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToUrl(Uyi.Web.CheckUrlKeyCall)">
            <summary>
            强键值对的数据转换为连接URL参数拼接参数格式
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToUrlNoEncode">
            <summary>
            强键值对的数据转换为连接URL参数拼接参数,并不对参数值进行url编码
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToUrlNoEncode(Uyi.Web.CheckUrlKeyCall)">
            <summary>
            强键值对的数据转换为连接URL参数拼接参数,并不对参数值进行url编码
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToXml">
            <summary>
            将数据转换为XML数据格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.VerifySign(System.String[])">
            <summary>
            数据验签方法验证签名的正确性
            </summary>
            <param name="secrets">签名密钥参数组，在应对不同的数据签名时提供不同的数据签名参数</param>
            <returns>返回签名验证结果，如果验证通过则为 true 否则为 false</returns>
        </member>
        <member name="P:Uyi.Web.IWebParamData.WebSignType">
            <summary>
            获取或者设置当前协议的加密类别
            </summary>
        </member>
        <member name="M:Uyi.Web.IWebParamData.ToNewWebParamData(System.Boolean)">
            <summary>
            输出一个新的 WebParam 对象;
            </summary>
            <param name="ignoreCase">指示新对象是否不区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.CheckTimeOut(System.Int32)">
            <summary>
            检查当前请求是否已经超时
            </summary>
            <param name="timespan">验证超时阈值</param>
            <returns>返回一个布尔值表示当前的请求是否超时，如果已超时返回 true 否则 返回 false</returns>
        </member>
        <member name="M:Uyi.Web.IWebParamData.MarkTimestamp">
            <summary>
            标记时间戳
            </summary>
        </member>
        <member name="M:Uyi.Web.IWebParamData.RemoveTimestamp">
            <summary>
            删除时间戳参数
            </summary>
        </member>
        <member name="M:Uyi.Web.IWebParamData.RemoveSign">
            <summary>
            删除签名参数
            </summary>
        </member>
        <member name="T:Uyi.Web.SignType">
            <summary>
            签名类别
            </summary>
        </member>
        <member name="F:Uyi.Web.SignType.MD5">
            <summary>
            MD5 加密方式
            </summary>
        </member>
        <member name="F:Uyi.Web.SignType.SHA1">
            <summary>
            SHA1 加密方式
            </summary>
        </member>
        <member name="F:Uyi.Web.SignType.SHA256">
            <summary>
            SHA256 加密方式
            </summary>
        </member>
        <member name="F:Uyi.Web.SignType.RSA2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.Web.SignType.RSA">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Win32API.SystemTools">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Win32API.SystemTools.SetSystemTime(Uyi.Win32API.SYSTEMTIME@)">
            <summary>
            设定，获取系统时间,SetSystemTime()默认设置的为UTC时间，比北京时间少了8个小时。
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Win32API.SystemTools.SetLocalTime(Uyi.Win32API.SYSTEMTIME@)">
            <summary>
             设定，获取系统时间,SetSystemTime()默认设置的为UTC时间，比北京时间少了8个小时。
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Win32API.SystemTools.GetSystemTime(Uyi.Win32API.SYSTEMTIME@)">
            <summary>
             设定，获取系统时间,SetSystemTime()默认设置的为UTC时间，比北京时间少了8个小时。
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Uyi.Win32API.SystemTools.GetLocalTime(Uyi.Win32API.SYSTEMTIME@)">
            <summary>
             设定，获取系统时间,SetSystemTime()默认设置的为UTC时间，比北京时间少了8个小时。
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Uyi.Win32API.SystemTools.IsAdministrator">
            <summary>
            检查当前进程的程序是否有系统管理员权限身份
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Win32API.SYSTEMTIME">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.Win32API.user32">
            <summary>
            类user32的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Win32API.user32.GetDC(System.IntPtr)">
            <summary>    
            该函数检索一指定窗口的客户区域或整个屏幕的显示设备上下文环境的句柄，
            以后可以在GDI函数中使用该句柄来在设备上下文环境中绘图。hWnd：设备上下文环境被检索的窗口的句柄    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>    
            函数释放设备上下文环境（DC）供其他应用程序使用。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.GetDesktopWindow">
            <summary>    
            该函数返回桌面窗口的句柄。桌面窗口覆盖整个屏幕。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.ShowWindow(System.IntPtr,System.Int16)">
            <summary>    
            该函数设置指定窗口的显示状态。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.UpdateWindow(System.IntPtr)">
            <summary>    
            通过发送重绘消息 WM_PAINT 给目标窗体来更新目标窗体客户区的无效区域。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.SetForegroundWindow(System.IntPtr)">
            <summary>    
            该函数将创建指定窗口的线程设置到前台，并且激活该窗口。
            键盘输入转向该窗口，并为用户改各种可视的记号。系统给创建前台窗口的线程分配的权限稍高于其他线程。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>    
            该函数改变一个子窗口，弹出式窗口式顶层窗口的尺寸，位置和Z序。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.OpenClipboard(System.IntPtr)">
            <summary>    
            打开剪切板    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.CloseClipboard">
            <summary>    
            关闭剪切板    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.EmptyClipboard">
            <summary>    
            打开清空剪切板 </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.SetClipboardData(System.UInt32,System.IntPtr)">
            <summary>    
            将存放有数据的内存块放入剪切板的资源管理中    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.GetParent(System.IntPtr)">
            <summary>    
            该函数获得一个指定子窗口的父窗口句柄。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>    
            该函数将指定的消息发送到一个或多个窗口。此函数为指定的窗口调用窗口程序，直到窗口程序处理完消息再返回。　    
            </summary>    
            <param name="hWnd">其窗口程序将接收消息的窗口的句柄</param>    
            <param name="msg">指定被发送的消息</param>    
            <param name="wParam">指定附加的消息指定信息</param>    
            <param name="lParam">指定附加的消息指定信息</param>    
            <returns></returns>    
        </member>
        <member name="M:Uyi.Win32API.user32.SendMessage(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            该函数将指定的消息发送到一个或多个窗口。此函数为指定的窗口调用窗口程序，直到窗口程序处理完消息再返回。
            </summary>
            <param name="hWnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Win32API.user32.PostMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>    
            该函数将一个消息放入（寄送）到与指定窗口创建的线程相联系消息队列里    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.SetFocus(System.IntPtr)">
            <summary>    
            该函数对指定的窗口设置键盘焦点。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.SetParent(System.IntPtr,System.IntPtr)">
            <summary>    
            该函数改变指定子窗口的父窗口。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>    
            获取对话框中子窗口控件的句柄    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.InvalidateRect(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>    
            该函数向指定的窗体添加一个矩形，然后窗口客户区域的这一部分将被重新绘制。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.WaitMessage">
            <summary>    
            该函数产生对其他线程的控制，如果一个线程没有其他消息在其消息队列里。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.LoadCursor(System.IntPtr,System.UInt32)">
            <summary>    
            该函数从一个与应用事例相关的可执行文件（EXE文件）中载入指定的光标资源.    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.SetCursor(System.IntPtr)">
            <summary>    
            该函数确定光标的形状。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.GetFocus">
            <summary>    
            确定当前焦点位于哪个控件上。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.ReleaseCapture">
            <summary>    
            该函数从当前线程中的窗口释放鼠标捕获，并恢复通常的鼠标输入处理。捕获鼠标的窗口接收所有的鼠标输入（无论光标的位置在哪里），除非点击鼠标键时，光标热点在另一个线程的窗口中。    
            </summary>    
        </member>
        <member name="M:Uyi.Win32API.user32.FlashWindow(System.IntPtr,System.Boolean)">
            <summary>
            窗体闪动效果
            </summary>
            <param name="hWnd"></param>
            <param name="bInvert"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Win32API.user32.GetForegroundWindow">
            <summary>
            获得本窗体的句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Win32API.user32.PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            向指定的窗口句柄发送消息
            </summary> 
        </member>
        <member name="M:Uyi.Win32API.user32.PostMessage(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary>
            向指定的窗口句柄发送消息
            </summary>
        </member>
        <member name="T:Uyi.UyiSysConfigDataManager">
            <summary>
            平台系统相关逻辑配置参数
            </summary>
        </member>
        <member name="F:Uyi.UyiSysConfigDataManager.GSServerMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.UyiSysConfigDataManager.GSServerMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.UyiSysConfigDataManager.TableIDMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.UyiSysConfigDataManager.TableIDMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.UyiSysConfigDataManager.TableIDLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:Uyi.UyiSysConfigDataManager.EmptyBytes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.UyiToolsMethods">
            <summary>
            为运行时提供相关功能的杂项方法
            </summary>
        </member>
        <member name="M:Uyi.UyiToolsMethods.FastAllocateString(System.Int32)">
            <summary>
            动态分配获取一个字符串，其字符串长度为其传入的字符串长度
            </summary>
            <param name="length">动态创建的长度值</param>
            <returns>返回创建的字符串</returns>
        </member>
        <member name="M:Uyi.UyiToolsMethods.GetIgnoreCaseStringHashCode(System.String)">
            <summary>
            无视大小写的获取字符串HashCode值（该操作会将所有字符串转换为小写字母来处理）
            </summary>
            <param name="str">需要计算的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.UyiToolsMethods.MemoryCopy(System.Void*,System.Byte[],System.Int32,System.Int32)">
            <summary>
            从指定的指针位置开始复制一系列字节到指定的缓冲区
            </summary>
            <param name="src">源数据的指针</param>
            <param name="buffer">接收拷贝数据的缓冲区</param>
            <param name="startIndex">数据的开始位置</param>
            <param name="count">拷贝的数量</param>
            <param name="srcOffset">拷贝的数量</param>
        </member>
        <member name="M:Uyi.UyiToolsMethods.BufferCopy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="srcOffset"></param>
            <param name="dec"></param>
            <param name="decOffset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Uyi.UyiToolsMethods.SplitCmd(System.String)">
            <summary>
            命令行参数解析器
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.UyiToolsMethods.CreateEqualityComparer``1(System.Func{``0,System.Int32},System.Func{``0,``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getHashCode"></param>
            <param name="equals"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.ServerConfigManager">
            <summary>
            类ServerConfigManager的注释信息
            </summary>
        </member>
        <member name="F:Uyi.ServerConfigManager.GMTools2GSSecret">
            <summary>
            GMTools对游戏服务器处理业务协商秘钥
            </summary>
        </member>
        <member name="T:Uyi.IO.FileHelper">
            <summary>
            系统文件
            </summary>
        </member>
        <member name="P:Uyi.IO.FileHelper.ProcessBaseDir">
            <summary>
            进程基础文件夹路径
            </summary>
        </member>
        <member name="P:Uyi.IO.FileHelper.ProcessName">
            <summary>
            当前程序的进程名称
            </summary>
        </member>
        <member name="M:Uyi.IO.FileHelper.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取当前目录中与指定搜索模式匹配并使用某个值确定是否在子目录中搜索的目录的数组。
            </summary> 
        </member>
        <member name="M:Uyi.IO.FileHelper.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
             返回指定目录中文件的名称，该目录与指定搜索模式匹配并使用某个值确定是否在子目录中搜索。
            </summary> 
        </member>
        <member name="M:Uyi.IO.FileHelper.Copy(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:Uyi.IO.FileHelper.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            创建一个新文件，在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件。
            </summary>
            <param name="path">写入文件的文件路径</param>
            <param name="context">写入的文件内容</param>
            <param name="encoding"></param>
        </member>
        <member name="M:Uyi.IO.FileHelper.WriteAllText(System.String,System.String)">
            <summary>
            创建一个新文件，在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件。
            </summary>
            <param name="path">写入文件的文件路径</param>
            <param name="context">写入的文件内容</param>
        </member>
        <member name="M:Uyi.IO.FileHelper.ReadAllText(System.String)">
            <summary>
            打开一个文本文件，读取文件的所有行，然后关闭该文件。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
             打开一个文件，使用指定的编码读取文件的所有行，然后关闭该文件。
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.ReadAllLines(System.String)">
            <summary>
             打开一个文件，使用指定的编码读取文件的所有行，然后关闭该文件。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.AppendAllText(System.String,System.String)">
            <summary>
            将指定的字符串追加到文件中，如果文件还不存在则创建该文件。
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
        </member>
        <member name="M:Uyi.IO.FileHelper.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            将指定的字符串追加到文件中，如果文件还不存在则创建该文件。
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Uyi.IO.FileHelper.ReadAllBytes(System.String)">
            <summary>
            打开一个文件，将文件的内容读入一个字节数组，然后关闭该文件。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。如果目标文件已存在，则覆盖该文件。
            </summary>
            <param name="path"></param>
            <param name="data"></param>
        </member>
        <member name="M:Uyi.IO.FileHelper.AppendAllBytes(System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="data"></param>
        </member>
        <member name="M:Uyi.IO.FileHelper.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
             打开一个文件，使用指定的编码读取文件的所有行，然后关闭该文件。
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.OpenWriterOrCreate(System.String)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.Open(System.String)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.Create(System.String)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.GetRelativePath(System.String,System.String)">
            <summary>
            获取指定文件相对于基础路径的相对路径
            </summary>
            <param name="basedir">需要计算的基础路径</param>
            <param name="filePath">需要计算的文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.WriteAllBytesAsync(System.String,System.Byte[],Uyi.UyiAction{System.Exception})">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <param name="call"></param>
        </member>
        <member name="M:Uyi.IO.FileHelper.ReadFileToMemoryStream(System.String)">
            <summary>
            读取一个文件并将其缓存到内存流中
            </summary>
            <param name="path">需要读取的文件路径</param>
            <returns>返回读取到的文件流，如果读取失败则返回 null 值</returns>
        </member>
        <member name="M:Uyi.IO.FileHelper.ReadFileToMemoryStreamAsync(System.String,Uyi.UyiAction{System.IO.MemoryStream})">
            <summary>
            开启一个异步操作来读取一个文件到内存流中
            </summary>
            <param name="path">需要读取的文件</param>
            <param name="call">读取失败的回调方法</param>
        </member>
        <member name="M:Uyi.IO.FileHelper.DeleteFileToRecycle(System.String)">
            <summary>
            将文件删除进回收站而不直接删除
            </summary>
            <param name="fullName"></param>
        </member>
        <member name="M:Uyi.IO.FileHelper.CheckFileIsOpen(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.IO.NetworkStream">
            <summary>
            提供一个只进的读写流。该类是线程安全的
            </summary>
        </member>
        <member name="M:Uyi.IO.NetworkStream.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.IO.NetworkStream.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Uyi.IO.NetworkStream.CopyTo(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Uyi.IO.NetworkStream.ReadByte">
            <summary>
            读取一个字节数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:Uyi.IO.NetworkStream.CanRead">
            <summary>
            只是该流是否支持读取
            </summary>
        </member>
        <member name="P:Uyi.IO.NetworkStream.CanSeek">
            <summary>
            指示该流是否支持查找
            </summary>
        </member>
        <member name="P:Uyi.IO.NetworkStream.CanWrite">
            <summary>
            指示该流是否支持写入
            </summary>
        </member>
        <member name="P:Uyi.IO.NetworkStream.Length">
            <summary>
            获取该流的数据长度
            </summary>
        </member>
        <member name="P:Uyi.IO.NetworkStream.Position">
            <summary>
            获取或者设置该流的游标位置
            </summary>
        </member>
        <member name="M:Uyi.IO.NetworkStream.Flush">
            <summary>
            将数据写入基础支持流并清空缓冲区
            </summary>
        </member>
        <member name="M:Uyi.IO.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取并删除读取的数据
            </summary> 
        </member>
        <member name="M:Uyi.IO.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流的游标位置
            </summary>
            <param name="offset">偏移量</param>
            <param name="origin"></param>
            <returns>该流不支持该方法，调用该方法永远引发 <see cref="T:System.NotSupportedException"/> 异常</returns>
        </member>
        <member name="M:Uyi.IO.NetworkStream.SetLength(System.Int64)">
            <summary>
            设置数据流的长度，执行该操作一般会导致截断数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.IO.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向流的末尾处追加数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:Uyi.IO.NetworkStream.Count">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:Uyi.IO.NetworkStream.Item(System.Int32)">
            <summary>
            获取指定索引处的字节数据
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.NetworkStream.ReadArray(System.Int32,System.Int32)">
            <summary>
            读取但不删除数据
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.NetworkStream.ReadAndRemoveBytes(System.Int32,System.Int32)">
            <summary>
            读取并删除读取的数据
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.NetworkStream.Remove(System.Int32)">
            <summary>
            删除数据
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Uyi.IO.NetworkStream.ToByteArray">
            <summary>
            返回缓冲区内所有数据的一个数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.NetworkStream.ToArray">
            <summary>
            返回缓冲区内所有数据的一个数组，并清空缓存区
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.IO.NetworkStream.Write(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Uyi.IO.NetworkStream.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Uyi.IO.UyiStreamWriter">
            <summary>
            类UyiStreamWriter的注释信息
            </summary>
        </member>
        <member name="M:Uyi.IO.UyiStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            用指定的编码及默认缓冲区大小，为指定的流初始化 <see cref="T:Uyi.IO.UyiStreamWriter"/> 类的新实例。
            不会再流的开头添加编码信息
            </summary>
            <param name="stream">要写入的流</param>
            <param name="encoding">要使用的字符编码</param>
        </member>
        <member name="M:Uyi.IO.UyiStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            用默认的UTF-8编码及默认缓冲区大小，为指定的流初始化 <see cref="T:Uyi.IO.UyiStreamWriter"/> 类的新实例。
            不会再流的开头添加编码信息
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Uyi.IO.UyiStreamWriter.Close">
            <summary>
            关闭操作对象
            </summary>
        </member>
        <member name="M:Uyi.IO.UyiStreamWriter.Flush">
            <summary>
            清空缓冲区，并将缓冲区的对象写到基础对象中
            </summary>
        </member>
        <member name="M:Uyi.IO.UyiStreamWriter.Write(System.String)">
            <summary>
            将指定的字符串内容写入到响应流中
            </summary>
            <param name="value">需要写入的字符串内容</param>
        </member>
        <member name="M:Uyi.IO.UyiStreamWriter.WriteLine(System.String)">
            <summary>
            将指定的字符串内容写入到响应流中，并在其字符串尾部追加换行符
            </summary>
            <param name="value">需要写入的字符串内容</param>
        </member>
        <member name="M:Uyi.IO.UyiStreamWriter.Dispose">
            <summary>
            释放其对象
            </summary>
        </member>
        <member name="T:Uyi.Pools.UyiPoolManagerBase`1">
            <summary>
            对象池管理器提供基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Uyi.Pools.UyiPoolManagerBase`1.FreeCount">
            <summary>
            获取当前对象池中空闲对象的数量
            </summary>
        </member>
        <member name="P:Uyi.Pools.UyiPoolManagerBase`1.UseCount">
            <summary>
            获取当前对象池中正在使用的对象数量
            </summary>
        </member>
        <member name="M:Uyi.Pools.UyiPoolManagerBase`1.Pop">
            <summary>
            从对象池中弹出一个对象
            </summary>
            <returns>返回一个可以重复利用的对象</returns>
        </member>
        <member name="M:Uyi.Pools.UyiPoolManagerBase`1.Push(`0)">
            <summary>
            将对象压入对象池（应用程序保证对象的引用已完毕，即一旦被压入对象池，该对象即可能被重复使用）
            </summary>
            <param name="item">需要压入对象池的对象</param>
        </member>
        <member name="M:Uyi.Pools.UyiPoolManagerBase`1.CreateNewInstance">
            <summary>
            创建一个对象的新实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uyi.Pools.UyiPoolManagerBase`1.FinalizeObject(`0)">
            <summary>
            释放对象操作
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Uyi.Pools.IPoolObjectItem`1">
            <summary>
            定义一个接口指示每个支持对象管理池的对象必须实现的接口
            </summary>
            <typeparam name="T">请传入派生类的类型以做管理</typeparam>
        </member>
        <member name="P:Uyi.Pools.IPoolObjectItem`1.PoolManager">
            <summary>
            获取或者设置当前对象的对象池管理器
            </summary>
        </member>
        <member name="M:Uyi.Pools.IPoolObjectItem`1.Inializer">
            <summary>
            对象首次初始化方法
            </summary>
        </member>
        <member name="M:Uyi.Pools.IPoolObjectItem`1.Reset">
            <summary>
            对象重置方法，并返回一个bool 值指示对象的重置是否成功
            </summary>
            <returns>如果对象重置成功请返回 true，否则为 false</returns>
        </member>
        <member name="M:Uyi.Pools.IPoolObjectItem`1.MarkFinalize">
            <summary>
            标记一个对象将被释放，它不应该被回收进对象池
            </summary>
        </member>
        <member name="P:Uyi.Pools.IPoolObjectItem`1.IsMarkFinalize">
            <summary>
            指示当前对象是否已经被标记为需要释放对象
            </summary>
        </member>
        <member name="M:Uyi.Pools.IPoolObjectItem`1.ObjectDisposed">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务
            </summary>
        </member>
        <member name="P:Uyi.Pools.IPoolObjectItem`1.ObjectID">
            <summary>
            如果对象在对象池中管理，对象池为其分配对象管理对象ID
            </summary>
        </member>
        <member name="T:Uyi.Pools.IObjectPoolManager`1">
            <summary>
            定义一个接指示每个对象池管理器必须实现的接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Uyi.Pools.IObjectPoolManager`1.Push(`0)">
            <summary>
            将对象压入对象池（应用程序保证对象的引用已完毕，即一旦被压入对象池，该对象即可能被重复使用）
            </summary>
            <param name="item">需要压入对象池的对象</param>
        </member>
        <member name="M:Uyi.Pools.IObjectPoolManager`1.Pop">
            <summary>
            从对象池中弹出一个对象
            </summary>
            <returns>返回一个可以重复利用的对象</returns>
        </member>
        <member name="P:Uyi.Pools.IObjectPoolManager`1.UseCount">
            <summary>
            获取当前对象池中正在使用的对象数量
            </summary>
        </member>
        <member name="P:Uyi.Pools.IObjectPoolManager`1.FreeCount">
            <summary>
            获取当前对象池中空闲对象的数量
            </summary>
        </member>
        <member name="T:Uyi.Text.RegularExpressions.UyiRegexHelper">
            <summary>
            类UyiRegexHelper的注释信息
            </summary>
        </member>
        <member name="M:Uyi.Text.RegularExpressions.UyiRegexHelper.GetRegexObject(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取正则对象
            </summary>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Uyi.Text.RegularExpressions.UyiRegexHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
             指示正则表达式使用 pattern 参数中指定的正则表达式和 options 参数中提供的匹配选项是否在输入字符串中找到匹配项。
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.SpaceChar">
            <summary>
            空白字符匹配
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.CheckPhoneNum">
            <summary>
            检查手机号码是否符合规则
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.CheckUPwd">
            <summary>
            检查密码是否符合规则
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.SpaceLine">
            <summary>
            匹配空行
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.HttpRequest">
            <summary>
            匹配请求头数据
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.WebSocket_Connection">
            <summary>
            WebSocket_Connection
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.WebSocket_Upgrade">
            <summary>
            WebSocket_Upgrade
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.PositiveInteger">
            <summary>
            验证正整数
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.IP">
            <summary>
            验证IP格式
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.Identifier">
            <summary>
            标识符验证
            </summary>
        </member>
        <member name="P:Uyi.Text.RegularExpressions.UyiRegexHelper.Identifier2">
            <summary>
            标识符验证
            </summary>
        </member>
        <member name="T:Uyi.Text.StringJoiner">
            <summary>
            包含一个封装 StringBuilder 的字符串连接处理类，（当前类的所有操作运算符都是引用传递操作）
            </summary>
        </member>
        <member name="M:Uyi.Text.StringJoiner.#ctor">
            <summary>
            初始化 Uyi.Text.StringJoiner 类的新实例。
            </summary>
        </member>
        <member name="M:Uyi.Text.StringJoiner.#ctor(System.String)">
            <summary>
            使用指定的字符串初始化 Uyi.Text.StringJoiner 类的新实例。
            </summary>
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Implicit(System.String)~Uyi.Text.StringJoiner">
            <summary>
            包含一个隐示转换，即将 String 类型 转换为 StringJoiner
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Implicit(Uyi.Text.StringJoiner)~System.String">
            <summary>
            包含一个隐示转换，即将 StringJoiner 类型 转换为 String
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.String)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.Boolean)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.Byte)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.Int16)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.UInt16)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.Int32)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.UInt32)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.Int64)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.UInt64)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.Single)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.Double)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.op_Addition(Uyi.Text.StringJoiner,System.Decimal)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Uyi.Text.StringJoiner.ToString">
            <summary>
            返回当前的字符串值
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uyi.Threading.IUyiThreadPoolProvider">
            <summary>
            定义一个线程池任务调度器必须实现的接口
            </summary>
        </member>
        <member name="M:Uyi.Threading.IUyiThreadPoolProvider.QueueUserWorkItem(Uyi.UyiAction)">
            <summary>
            向线程池中发送工作任务
            </summary>
            <param name="runMethod">需要执行的任务方法委托</param>
            <returns>如果将任务成功的排入线程池任务队列则为 true 否则引发异常</returns>
        </member>
        <member name="T:Uyi.Threading.UyiThreadPoolProviderManager">
            <summary>
            平台用线程池管理器
            </summary>
        </member>
        <member name="P:Uyi.Threading.UyiThreadPoolProviderManager.Instance">
            <summary>
            提供一个线程池调度器的单根实例
            </summary>
        </member>
        <member name="M:Uyi.Threading.UyiThreadPoolProviderManager.QueueUserWorkItem(Uyi.UyiAction)">
            <summary>
            将工作任务排入线程池队列
            </summary>
            <param name="runMethod"></param>
        </member>
        <member name="M:Uyi.Threading.UyiThreadPoolProviderManager.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.Threading.UyiThreadPoolProviderManager.Uyi#Threading#IUyiThreadPoolProvider#QueueUserWorkItem(Uyi.UyiAction)">
            <summary>
            将任务排入线程池队列以便执行
            </summary>
            <param name="runMethod"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.UyiExceptionBase">
            <summary>
            类UyiExceptionBase的注释信息
            </summary>
        </member>
        <member name="M:Uyi.UyiExceptionBase.#ctor(System.String,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Uyi.UyiExceptionBase.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Uyi.UyiExceptionBase.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Uyi.UyiExceptionBase.StackTrace">
            <summary>
            当前异常的调用堆栈信息
            </summary>
        </member>
        <member name="M:Uyi.UyiExceptionBase.GetErrorFormatString(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Uyi.UyiAction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Uyi.UyiAction`1">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="t1"></param> 
        </member>
        <member name="T:Uyi.UyiAction`2">
            <summary>
            
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
        </member>
        <member name="T:Uyi.UyiEventHandle">
            <summary>
            Uyi服务器系统事件通知委托
            </summary>
        </member>
        <member name="T:Uyi.UyiEventHandle`1">
            <summary>
            Uyi服务器系统事件通知委托
            </summary>
            <typeparam name="T">时间参数的对象类型信息</typeparam>
            <param name="sender">引发事件的对象</param>
            <param name="e">携带的事件参数</param>
        </member>
        <member name="T:Uyi.UyiEventHandle`2">
            <summary>
            Uyi服务器系统事件通知委托
            </summary>
            <typeparam name="TSender">事件发送对象的类型</typeparam>
            <typeparam name="TEventArg">事件参数的对象类型信息</typeparam>
            <param name="sender">引发事件的对象</param>
            <param name="e">携带的事件参数</param>
        </member>
        <member name="T:Uyi.UyiSystemErrorProvide">
            <summary>
            Uyi服务器异常信息的统一处理程序
            </summary>
        </member>
        <member name="E:Uyi.UyiSystemErrorProvide.UyiSystemErrorHandle">
            <summary>
            
            </summary>
        </member>
        <member name="E:Uyi.UyiSystemErrorProvide.UyiSystemLogHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Uyi.UyiSystemErrorProvide.OnUyiSystemErrorHandleEvent(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Uyi.UyiSystemErrorProvide.OnUyiSystemErrorHandleEventTrace(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Uyi.UyiSystemErrorProvide.OnUyiSystemLogHandle(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:PostFromDataParam`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PostFromDataParam`1.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
    </members>
</doc>
