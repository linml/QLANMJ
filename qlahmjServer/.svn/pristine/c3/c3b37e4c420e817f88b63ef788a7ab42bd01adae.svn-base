<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogonServerCommon</name>
    </assembly>
    <members>
        <member name="T:QL.Server.DBTools.RedisTools">
            <summary>
            Redis缓存操作类
            </summary>
            <summary>
            Redis缓存操作类
            </summary>
        </member>
        <member name="P:QL.Server.DBTools.RedisTools.RegionHost">
            <summary>
            获取区域库信息
            </summary>
        </member>
        <member name="F:QL.Server.DBTools.RedisTools.UseRedisCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:QL.Server.DBTools.RedisTools.MaxExpressTime">
            <summary>
            最大参数有效期
            </summary>
        </member>
        <member name="F:QL.Server.DBTools.RedisTools.DefaultExpressTime">
            <summary>
            默认参数有效期
            </summary>
        </member>
        <member name="M:QL.Server.DBTools.RedisTools.WriteValue(System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            写入数据
            </summary>
            <param name="dbName">数据库名称</param>
            <param name="tableName">集合名称</param>
            <param name="key">数据Key</param>
            <param name="value">写入的数据</param>
            <param name="expressTime">数据的过期时间（单位：秒）</param>
            <returns></returns>
        </member>
        <member name="M:QL.Server.DBTools.RedisTools.ReadValue(System.String,System.String,System.String)">
            <summary>
            读取数据
            </summary>
            <param name="dbName">数据库名称</param>
            <param name="tableName">集合名称</param>
            <param name="key">数据Key</param>
            <returns>返回读取到的数据如果读取失败则返回 null</returns>
        </member>
        <member name="M:QL.Server.DBTools.RedisTools.ReadAndRemoveValue(System.String,System.String,System.String)">
            <summary>
            读取并删除数据（这个不是线程安全的）
            </summary>
            <param name="dbName">数据库名称</param>
            <param name="tableName">集合名称</param>
            <param name="key">数据Key</param>
            <returns>返回读取到的数据如果读取失败则返回 null</returns>
        </member>
        <member name="T:QL.Server.Interfaces.IServerEventProcess">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Interfaces.IServerEventProcess.Process(System.Object)">
            <summary>
            
            </summary>
            <param name="eventTag"></param>
            <returns></returns>
        </member>
        <member name="T:QL.Server.Interfaces.IServerEventProcess`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QL.Server.Interfaces.IServerEventProcess`1.Process(`0)">
            <summary>
            
            </summary>
            <param name="eventTag"></param>
            <returns></returns>
        </member>
        <member name="M:QL.Server.Interfaces.IServerEventProcess`1.InitializerManager(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:QL.Server.Manage.ManageHelper.RunAction(QL.QLAction)">
            <summary>
            在服务器的消息队列线程上执行指定方法
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:QL.Server.Manage.ManageHelper.EnqueueMessage(QL.Server.Model.PipelineMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:QL.Server.Manage.ManageHelper.GetPlayerDataOnDBServer(System.UInt32,System.Boolean,QL.QLAction{System.Int32,QL.Common.PlayerServer})">
            <summary>
            从redis中获取玩家信息，如果获取失败的话会从数据库获取并缓存到redis
            </summary>
            <param name="UserID">玩家ID</param>
            <param name="getUserBag">是否获取玩家财务背包</param>
            <param name="ip"></param>
            <param name="player">玩家游戏</param>
            <returns>返回玩家信息，如果获取失败的话返回 null</returns>
        </member>
        <member name="T:QL.Server.Manage.MsgHandle.SubscribeMsgManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:QL.Server.Manage.MsgHandle.SubscribeMsgManager.SubscribeMsgProcesser">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.SubscribeMsgManager.SubscribeMsgProcesser.Process(QL.Server.Model.SubscribeOpInfo)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.SubscribeMsgManager.Invoke(System.Action)">
            <summary>
            
            </summary>
            <param name="call"></param>
        </member>
        <member name="T:QL.Server.Manage.MsgHandle.SystemHornMsgManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.SystemHornMsgManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:QL.Server.Manage.MsgHandle.SystemHornMsgManager.ServerHornEnity">
            <summary>
            
            </summary>
        </member>
        <member name="T:QL.Server.Manage.MsgHandle.SystemHornMsgManager.SystemHornMsgProcesser">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.SystemHornMsgManager.SystemHornMsgProcesser.Process(QL.ServerMessage.LS2LS.SystemHornMsg)">
            <summary>
            
            </summary>
            <param name="eventTag"></param>
            <returns></returns>
        </member>
        <member name="T:QL.Server.Manage.MsgHandle.ServerEventManager`3">
            <summary>
            服务器事件管理器
            </summary>
        </member>
        <member name="P:QL.Server.Manage.MsgHandle.ServerEventManager`3.Instance">
            <summary>
            服务器事件管理器单例
            </summary>
        </member>
        <member name="P:QL.Server.Manage.MsgHandle.ServerEventManager`3.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="P:QL.Server.Manage.MsgHandle.ServerEventManager`3.MsgQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.ServerEventManager`3.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.ServerEventManager`3.#ctor(`0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.ServerEventManager`3.SendEventMessage(`1)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:QL.Server.Manage.MsgHandle.ServerEventProcessBase`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.ServerEventProcessBase`1.InitializerManager(System.Object)">
            <summary>
            
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.ServerEventProcessBase`1.Process(`0)">
            <summary>
            
            </summary>
            <param name="eventTag"></param>
            <returns></returns>
        </member>
        <member name="T:QL.Server.Manage.MsgHandle.ServerEventProcessBase`2">
            <summary>
            
            </summary>
            <typeparam name="TManager"></typeparam>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="P:QL.Server.Manage.MsgHandle.ServerEventProcessBase`2.Manger">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.ServerEventProcessBase`2.InitializerManager(System.Object)">
            <summary>
            
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="T:QL.Server.Manage.MsgHandle.UserLogonEventManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:QL.Server.Manage.MsgHandle.UserLogonEventManager.UserLogonEventProcesser">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Manage.MsgHandle.UserLogonEventManager.UserLogonEventProcesser.Process(QL.Server.Model.ClientPipeline)">
            <summary>
            
            </summary>
            <param name="cp"></param>
            <returns></returns>
        </member>
        <member name="T:QL.Server.Manage.ServerListManage">
            <summary>
            服务器集合管理器
            </summary>
        </member>
        <member name="M:QL.Server.Manage.ServerListManage.#cctor">
            <summary>
            静态初始化类
            </summary>
        </member>
        <member name="P:QL.Server.Manage.ServerListManage.ly_ClientPipelineAll">
            <summary>
            客户端连接对象集合
            </summary>
        </member>
        <member name="P:QL.Server.Manage.ServerListManage.ly_ClientPipelineRegistered">
            <summary>
            一个客户端管道实例集合，他包含已验证和绑定玩家信息的客户端通信集合
            </summary>
        </member>
        <member name="P:QL.Server.Manage.ServerListManage.ly_GamePlayerInfoList">
            <summary>
            玩家信息集合
            </summary>
        </member>
        <member name="P:QL.Server.Manage.ServerListManage.ly_ServerMessage">
            <summary>
            服务消息队列
            </summary>
        </member>
        <member name="M:QL.Server.Manage.ServerListManage._serverMessage_MessageComing(System.Object,QL.Tools.MessageEventArgs{QL.Server.Model.PipelineMessage})">
            <summary>
            游戏服务器消息处理器
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:QL.Server.MessageHandles.ServerMessageHandle">
            <summary>
            服务消息处理器
            </summary>
        </member>
        <member name="M:QL.Server.MessageHandles.ServerMessageHandle.Process(QL.Server.Model.PipelineMessage)">
            <summary>
            服务器消息处理进程
            </summary> 
        </member>
        <member name="M:QL.Server.MessageHandles.ServerMessageHandle.TryProcess(QL.Server.Model.PipelineMessage)">
            <summary>
            尝试执行消息处理进程
            </summary>
            <param name="Msg">消息封装对象</param>
        </member>
        <member name="T:QL.Server.MessageHandles.ServerMessageHandle.InternalMsgCEnterGameRoom">
            <summary>
            指示玩家进入场地的处理方法
            </summary>
        </member>
        <member name="M:QL.Server.MessageHandles.ServerMessageHandle.InternalMsgCEnterGameRoom.ByRoomId(QL.Server.Model.GamePlayerInfo,QL.Common.MSG_C_EnterGameRoom,QL.Server.Model.ClientPipeline)">
            <summary>
            根据输入的场地Id进入场地
            </summary>
            <param name="player"></param>
            <param name="message"></param>
            <param name="client"></param>
        </member>
        <member name="M:QL.Server.MessageHandles.ServerMessageHandle.ProcesssPlayerLogon(QL.Net.IPipeline,QL.Common.MSG_C_LoginByAccount,QL.QLAction{System.UInt32})">
            <summary>
            处理玩家登陆的请求消息
            </summary>
            <param name="pipeline"></param>
            <param name="message"></param>
        </member>
        <member name="T:QL.Server.Model.ClientPipeline">
            <summary>
            表示一个客户端对象,它包含客户端管理阶段所需要的全部信息
            </summary>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.#ctor">
            <summary>
            初始化新实例
            </summary>
        </member>
        <member name="P:QL.Server.Model.ClientPipeline.PlayerId">
            <summary>
            玩家ID
            </summary>
        </member>
        <member name="P:QL.Server.Model.ClientPipeline.PipelineId">
            <summary>
            客户端通信的管道编号
            </summary>
        </member>
        <member name="P:QL.Server.Model.ClientPipeline.UserType">
            <summary>
            表示当前的通信管道
            </summary>
        </member>
        <member name="P:QL.Server.Model.ClientPipeline.Client">
            <summary>
            客户端通信管道
            </summary>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.SetPlayerInfo(QL.Common.PlayerServer)">
            <summary>
            设置当前管道的玩家信息
            </summary>
            <param name="player">玩家信息</param>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.Dispose">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.SendData(GameIF.CustomMessage)">
            <summary>
            发送数据
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.SendData(System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.SendMessage2GsServer(QL.Common.ServerInfo,QL.Server.Model.GamePlayerInfo,GameIF.CustomMessage[],System.Action{System.Boolean})">
            <summary>
            
            </summary>
            <param name="sInfo"></param>
            <param name="player"></param>
            <param name="message"></param>
            <param name="callback"></param>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.SetPlayerEnterRoom(System.UInt32,QL.Server.Model.GamePlayerInfo,QL.Common.ServerInfo)">
            <summary>
            设置玩家进入场地，这个方法是提供给 处理特殊客户端消息的处理方法
            </summary>
            <param name="room"></param>
            <param name="player"></param>
            <param name="sInfo"></param>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.SetPlayerEnterRoomByTableId(QL.Common.MSG_C_EnterGameRoom,QL.Server.Model.GamePlayerInfo,QL.Common.ServerInfo,System.Boolean)">
            <summary>
            设置玩家进入场地，这个方法是提供给 处理特殊客户端消息的处理方法
            </summary> 
            <param name="message"></param>
            <param name="player"></param>
            <param name="sInfo"></param>
            <param name="isCreator"></param>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.SetPlayerEnterRoomByTableId(QL.Server.Model.GamePlayerInfo,QL.Common.ServerInfo,GameIF.CustomMessage)">
            <summary>
            设置玩家进入场地，这个方法是提供给 处理特殊客户端消息的处理方法
            </summary>
            <param name="player"></param>
            <param name="sInfo"></param>
            <param name="sendMessage"></param>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.SendMessageToCurrentGameServer(GameIF.CustomMessage)">
            <summary>
            向玩家的所在的游戏服务器发送指定消息
            </summary>
            <param name="message">需要发送到玩家所在游戏服务器的消息</param>
        </member>
        <member name="M:QL.Server.Model.ClientPipeline.SetUserOtherLogon(System.String)">
            <summary>
            设置账号在异地登录处理消息
            </summary>
        </member>
        <member name="T:QL.Server.Model.GamePlayerInfo">
            <summary>
            玩家用户信息,包含各种玩家位置信息，基本信息，状态信息等
            </summary>
        </member>
        <member name="P:QL.Server.Model.GamePlayerInfo.UserID">
            <summary>
            玩家的用户ID信息
            </summary>
        </member>
        <member name="F:QL.Server.Model.GamePlayerInfo.IsValidatePwd">
            <summary>
            表示玩家是否已经成功验证玩家的二级密码
            </summary>
        </member>
        <member name="F:QL.Server.Model.GamePlayerInfo.GSServerLocation">
            <summary>
            玩家所在的游戏服务器编号，指定玩家所在的游戏服务器位置
            </summary>
        </member>
        <member name="T:QL.Server.Model.SubscribeOpInfo">
            <summary>
            提供消息订阅操作信息实体
            </summary>
        </member>
        <member name="F:QL.Server.Model.SubscribeOpInfo.Function">
            <summary>
            待执行的方法
            </summary>
        </member>
        <member name="F:QL.Server.Model.SubscribeOpInfo.ChanelName">
            <summary>
            渠道名称
            </summary>
        </member>
        <member name="F:QL.Server.Model.SubscribeOpInfo.OpType">
            <summary>
            指定操作类型
            </summary>
        </member>
        <member name="F:QL.Server.Model.SubscribeOpInfo.MessageData">
            <summary>
            如果要发送消息，指定发送消息的数据
            </summary>
        </member>
        <member name="F:QL.Server.Model.SubscribeOpInfo.Client">
            <summary>
            客户端管道信息
            </summary>
        </member>
        <member name="F:QL.Server.Model.SubscribeOpInfo.SessionId">
            <summary>
            客户端管道信息
            </summary>
        </member>
        <member name="T:QL.Server.Server.H5ProxyServer">
            <summary>
            H5的WEBSocket中转代理服务器服务器
            </summary>
        </member>
        <member name="P:QL.Server.Server.WebSocketSession.SessionID">
            <summary>
            通讯管理的会话ID
            </summary>
        </member>
        <member name="M:QL.Server.Server.WebSocketSession.Dispose">
            <summary>
            释放对象使用的资源
            </summary>
        </member>
        <member name="P:QL.Server.Server.WebSocketSession.Client">
            <summary>
            客户端通讯管道，这个是WebSocket客户端包装后的客户端对象
            </summary>
        </member>
        <member name="P:QL.Server.Server.WebSocketSession.GameServer">
            <summary>
            游戏服务器的通讯管道
            </summary>
        </member>
        <member name="M:QL.Server.Server.WebSocketSession.Client_Disposed(System.Object,System.EventArgs)">
            <summary>
            客户端数据交换管道被释放事件处理程序
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:QL.Server.Server.WebSocketSession.Client_ReceiveCompleted(System.Object,QL.Net.BufferReceiveEventArgs)">
            <summary>
            数据管道收到数据时的事件处理程序
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:QL.Server.Server.WebSocketSession.BeforeSendDataEventHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.Server.WebSocketSession.OnBeforeSendDataEventHandle(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:QL.Server.Server.WebSocketSession.BeginConnectGameServer(System.String,System.Int32,System.Action{System.Boolean})">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="callback"></param>
        </member>
        <member name="M:QL.Server.Server.WebSocketSession.Ping">
            <summary>
            向对端发送一条Ping指令
            </summary>
        </member>
        <member name="T:QL.Server.IUUService">
            <summary>
            
            </summary>
        </member>
        <member name="M:QL.Server.IUUService.Start(System.Action{System.Boolean})">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:QL.Server.IUUService.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="T:QL.Server.UUServer">
            <summary>
            连接服务对象
            </summary>
        </member>
        <member name="P:QL.Server.UUServer.IsRun">
            <summary>
            表示服务器是否运行
            </summary>
        </member>
        <member name="P:QL.Server.UUServer.Instance">
            <summary>
            服务实例
            </summary>
        </member>
        <member name="M:QL.Server.UUServer.Start(System.Action{System.Boolean})">
            <summary>
            启动服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:QL.Server.UUServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:QL.Server.UUServer.Close">
            <summary>
            关闭并释放服务器所占用的资源，一般该方法会重置服务器为初始化状态
            </summary>
        </member>
        <member name="M:QL.Server.UUServer.Dispose">
            <summary>
            释放服务器对象占用的所有资源
            </summary>
        </member>
        <member name="T:QL.Extension.Extension">
            <summary>
            服务器使用的一些扩展方法
            </summary>
        </member>
        <member name="M:QL.Extension.Extension.PlayerMoneyChanged(QL.Server.Model.GamePlayerInfo,System.Data.DataTable)">
            <summary>
            加载玩家的财务背包信息的修改数据
            </summary>
            <param name="player"></param> 
            <param name="table"></param>
        </member>
        <member name="M:QL.Extension.Extension.SendData(QL.Server.Model.GamePlayerInfo,GameIF.CustomMessage)">
            <summary>
            给玩家发送数据
            </summary>
            <param name="player"></param>
            <param name="message"></param>
        </member>
        <member name="M:QL.Extension.Extension.SendData(QL.Server.Model.GamePlayerInfo,System.Byte[])">
            <summary>
            给玩家发送数据
            <param name="player"></param> 
            <param name="data"></param> 
            </summary>
        </member>
        <member name="M:QL.Extension.Extension.SendDataToPlayerGS(QL.Server.Model.GamePlayerInfo,GameIF.CustomMessage)">
            <summary>
            给玩家所在的游戏服务器发送数据
            </summary>
            <param name="player"></param>
            <param name="message"></param>
        </member>
        <member name="M:QL.Extension.Extension.SendError(QL.Server.Model.GamePlayerInfo,QL.Common.SystemErrorCode,System.String)">
            <summary>
            给玩家发送错误码数据
            </summary>
            <param name="player"></param>
            <param name="errCode"></param>
            <param name="reason"></param>
        </member>
        <member name="M:QL.Extension.Extension.SendError(QL.Net.IPipeline,QL.Common.SystemErrorCode,System.String)">
            <summary>
            给玩家发送错误码数据
            </summary>
            <param name="player"></param>
            <param name="errCode"></param>
            <param name="reason"></param>
        </member>
        <member name="M:QL.Extension.Extension.UpdatePlayerFromPlayerBase(QL.Common.PlayerServer,QL.Common.PlayerBase)">
            <summary>
            参照基类的玩家基本数据更新玩家服务端最新的玩家数据
            </summary>
            <param name="player">需要更新的玩家信息</param>
            <param name="playerBase">玩家信息的基础数据信息对象</param>
        </member>
        <member name="T:QL.QLDebug">
            <summary>
            
            </summary>
        </member>
        <member name="T:ErrorString">
            <summary>
            这个类为当前服务器平台的错误信息定义常量值
            </summary>
        </member>
    </members>
</doc>
